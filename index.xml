<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home page on ck-blog</title>
    <link>/</link>
    <description>Recent content in Home page on ck-blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 10 Jan 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Integrating Notes and SRS</title>
      <link>/posts/integrating-notes-and-srs/</link>
      <pubDate>Fri, 10 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/integrating-notes-and-srs/</guid>
      <description>This is a rough braindump about a project I&amp;rsquo;ve been thinking about recently.
A better way of using notes? So i&amp;rsquo;ve been tinkering around with better systems for taking notes recently. I&amp;rsquo;m not a big fan of keeping notes, around because I don&amp;rsquo;t find myself actually revisiting them, and when I do, I don&amp;rsquo;t get much value out of it. On the other hand, my experience with language learning has definitely showed me how effective spaced repetition is when it comes to keeping things in your head.</description>
    </item>
    
    <item>
      <title>React Pitfalls: useState initialization</title>
      <link>/posts/react-pitfalls-usestate/</link>
      <pubDate>Thu, 09 Jan 2020 10:10:11 +0100</pubDate>
      
      <guid>/posts/react-pitfalls-usestate/</guid>
      <description>Summary This is a quick post about a &amp;ldquo;gotcha&amp;rdquo; I encountered recently in a React application. This involved the use of React&amp;rsquo;s useState hook, which had a subtle difference between how I thought the hook worked, and how it actually worked.
React Hooks If you&amp;rsquo;re already familiar with hooks in React, feel free to skip this section. This is just a recap for those out of the loop.
Although the first real framework I worked with was Vue (I don&amp;rsquo;t count the one application I built with JQuery as having used a framework), I&amp;rsquo;ve been using React a ton lately, and it&amp;rsquo;s really been growing on me.</description>
    </item>
    
    <item>
      <title>Structured Immersion</title>
      <link>/posts/structured-immersion/</link>
      <pubDate>Sat, 28 Dec 2019 13:13:00 +0100</pubDate>
      
      <guid>/posts/structured-immersion/</guid>
      <description>When it comes to language learning, one approach that I really subscribe to is immersion. This means trying to absorb as much of the language as possible, as often as possible. It&amp;rsquo;s often said that &amp;ldquo;speaking with locals&amp;rdquo; is a good way to accelerate the learning process, and there&amp;rsquo;s a lot of truth with that statement.
Comprehensible Input One aspect of immersion that&amp;rsquo;s often overlooked is the idea of comprehensible input.</description>
    </item>
    
    <item>
      <title>Layerability and Abstraction</title>
      <link>/posts/layerability/</link>
      <pubDate>Sun, 27 Oct 2019 17:07:40 +0100</pubDate>
      
      <guid>/posts/layerability/</guid>
      <description>Layerability and Networking An interesting aspect of Networking is how different protocols are layered. For example, to view this page, you had to make an HTTP request. That request was delivered using the TCP protocol, which in turn used the IP protocol, and finally the underlying protocol to send data to your router (skimming a bit over details). Each of these layers only makes use of the one directly beneath it: an implementation of an HTTP client worries about TCP, the TCP code in your OS deals with IP, etc.</description>
    </item>
    
    <item>
      <title>Poline</title>
      <link>/posts/poline/</link>
      <pubDate>Sat, 31 Aug 2019 19:18:13 -0400</pubDate>
      
      <guid>/posts/poline/</guid>
      <description>(Note: this is a first draft)
This is a post about Poline, a tiny programming language I wrote recently. The main &amp;ldquo;gimmick&amp;rdquo; of Poline is a feature called Green Threads. In fact, Poline doesn&amp;rsquo;t have many other features besides them.
Green what? Green Threads are a way of managing concurrency. The core idea is to have many lightweight threads scheduled over fewer OS threads. These tiny threads are then managed by the runtime itself, instead of the OS.</description>
    </item>
    
    <item>
      <title>From Interfaces to Traits</title>
      <link>/posts/interfaces-to-traits/</link>
      <pubDate>Sat, 17 Aug 2019 08:32:00 -0400</pubDate>
      
      <guid>/posts/interfaces-to-traits/</guid>
      <description>This is a post about how different languages handle the concept of interfaces. We&amp;rsquo;ll go over the classical OO way of handling them, with Java, to the more recent approaches of languages like Rust, as well as others in between.
Why do we want interfaces? The problem interfaces address is polymorphism. Polymorphic code can work with different types of things in a flexible way. In practice this means functions that can accept different types, and work differently based on those types.</description>
    </item>
    
    <item>
      <title>Poline</title>
      <link>/projects/poline/</link>
      <pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/projects/poline/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Poline&lt;/strong&gt; is a little programming language I wrote to learn
about implementing Green Threading. The language
doesn&amp;rsquo;t feature much more than string litterals, and mechanisms
for spawning threads and communicating between them.&lt;/p&gt;
&lt;p&gt;Green Threads allow many logical threads in a program to
execute on a limited number of actual OS threads. They
can be preempted off if they invoke a blocking operation.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sentence Banking</title>
      <link>/posts/sentence-banking/</link>
      <pubDate>Sun, 07 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/sentence-banking/</guid>
      <description>This is a post about ginkou, a tool I made recently. This tool uses Rust, SQLite, as well as mecab to archive sentences, and then to retrieve them based on the words they contain.
Why would I need this? Unless you&amp;rsquo;re learning Japanese, you probably won&amp;rsquo;t.
With the way I&amp;rsquo;m approaching it, I try and combine words and grammar into the same flashcard system. This means making new flashcarsd with sentences containing small bits of information I&amp;rsquo;m trying to learn.</description>
    </item>
    
    <item>
      <title>Ginkou</title>
      <link>/projects/ginkou/</link>
      <pubDate>Fri, 28 Jun 2019 20:55:57 +0200</pubDate>
      
      <guid>/projects/ginkou/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Ginkou&lt;/strong&gt; is a program to build up a corpus of searchable sentences.
&lt;strong&gt;Ginkou&lt;/strong&gt; can consume Japanese sentences from the command line, or from a text
file, parse those sentences into words, and then index those sentences for
easy retrieval. Given a word, &lt;strong&gt;Ginkou&lt;/strong&gt; can look up sentences containing
that word, even if it&amp;rsquo;s in a different form, such as a conjugated verb.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Data Races vs Race Conditions</title>
      <link>/posts/data-races-vs-race-conditions/</link>
      <pubDate>Fri, 14 Jun 2019 20:15:10 +0200</pubDate>
      
      <guid>/posts/data-races-vs-race-conditions/</guid>
      <description>This is a quick post about the difference between Data Races and Race Conditions, and how data structures or patterns providing freedom from data races can fail to provide race condition freedom.
The examples will be given in Go, since that&amp;rsquo;s a language with a few of the concurrent constructs that come into play here, as well as the language that sparked this blog post in the first place.
Data Races I agree almost entirely with rust&amp;rsquo;s definition of data races.</description>
    </item>
    
    <item>
      <title>Introducing Ludus</title>
      <link>/posts/introducing-ludus/</link>
      <pubDate>Thu, 13 Jun 2019 21:35:12 +0200</pubDate>
      
      <guid>/posts/introducing-ludus/</guid>
      <description>This is a short post about a crate I recently published: https://crates.io/crates/ludus. This crate provides the core logic of an NES emulator, and can be used to build independent GUI applications.
Ludus started out as a standalone NES emulator, back in October of 2018. At that point, I had gotten a completely working emulator, aside from some pretty glaring audio issues. I wanted to revisit it at some point, in order to fix the audio.</description>
    </item>
    
    <item>
      <title>Persistent-ts</title>
      <link>/projects/persistent-ts/</link>
      <pubDate>Mon, 20 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/projects/persistent-ts/</guid>
      <description>&lt;p&gt;This is a library providing a handful of persistent data structures for Typescript.
This includes immutable collections like linked-lists, and clojure-style vectors.
Persistent data structures are immutable, but can efficiently share data between instances,
and are thus more efficient than a normal copy-on-write collection when working without mutation.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The Component Pattern</title>
      <link>/posts/component-pattern/</link>
      <pubDate>Tue, 14 May 2019 13:57:24 +0200</pubDate>
      
      <guid>/posts/component-pattern/</guid>
      <description>This post details a useful pattern for organizing stateful components in functional code. This post assumes knowledge of Haskell, up to Monad-Transformers.
The Problem The organization of a codebase is important: how the files are the laid out, and how the structures inside those files mesh together. A poorly laid out codebase can be difficult to navigate and expand. Poorly laid out code can be hard to understand, and even harder to build upon.</description>
    </item>
    
    <item>
      <title>Bittorrent Is Hard - 1</title>
      <link>/posts/bittorrent-the-hard-parts1/</link>
      <pubDate>Fri, 03 May 2019 16:54:09 +0200</pubDate>
      
      <guid>/posts/bittorrent-the-hard-parts1/</guid>
      <description>About these posts I&amp;rsquo;ve been working on a bittorrent client in haskell recently. It&amp;rsquo;s now at the point where it can download torrents in the wild.
The protocol itself is well specified, although it takes a few read-throughs to get the hang of it. The first time I read through the protocol I didn&amp;rsquo;t understand much. But as I started implementing different parts of the protocol, those parts of the document started making more and more sense.</description>
    </item>
    
    <item>
      <title>Serve-csv</title>
      <link>/projects/serve-csv/</link>
      <pubDate>Tue, 30 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/projects/serve-csv/</guid>
      <description>&lt;p&gt;This is a program that can take a folder of CSV files and serve them as a REST API.
The program also uses a JSON file for each file, to specify how each column maps to a JSON
field. The program is written in Go to make use of the built-in HTTP server.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Haze</title>
      <link>/projects/haze/</link>
      <pubDate>Sun, 28 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/projects/haze/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Haze&lt;/strong&gt; is a complete bittorrent client, capable of downloading any kind
of torrent found in the wild. Bittorrent is a peer-to-peer protocol, where a client
joins a large swarm of peers in order to download a file of common interest. Haskell was
used in order to help manage the concurrency involved in communicating with a large number of
peers.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dex</title>
      <link>/projects/dex/</link>
      <pubDate>Sat, 27 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/projects/dex/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://cronokirby.github.io/dex&#34;&gt;Live&lt;/a&gt;.
&lt;strong&gt;Dex&lt;/strong&gt; is a little frontend app for searching and seeing stats about Pokemon, made with Vue.
The app wraps around the &lt;a href=&#34;https://pokeapi.co/&#34;&gt;pokeapi&lt;/a&gt; REST API for information about each Pokemon.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Notes on Ripple</title>
      <link>/posts/notes-on-ripple/</link>
      <pubDate>Tue, 09 Apr 2019 13:04:46 +0200</pubDate>
      
      <guid>/posts/notes-on-ripple/</guid>
      <description>mermaid.initialize({startOnLoad: True}); Ripple itself I recently spent a week working on a tiny irc-like service, called ripple. The main difference between ripple and a traditional chat service is the complete lack of a central server.
In this post I explore different ways to organise decentralised services like ripple, and then explain how ripple itself works.
Organisation One of the tougher problems in taking a normal service and decentralising it is how to shape the network.</description>
    </item>
    
    <item>
      <title>Ripple</title>
      <link>/projects/ripple/</link>
      <pubDate>Tue, 09 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/projects/ripple/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Ripple&lt;/strong&gt; is a program implementing a small decentralised chat protocol, written in &lt;em&gt;Go&lt;/em&gt;.
The protocol involves participating nodes ferrying messages to eachother in a ring like fashion.
New nodes can join the chat by talking to any of the existing nodes in the swarm. &lt;em&gt;Go&lt;/em&gt; is used for
simple networking and concurrency, as well as to provide both a command line, and a graphical terminal interface.
&lt;a href=&#34;/posts/notes-on-ripple/&#34;&gt;Read More&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Huffman-rs</title>
      <link>/projects/huffman-rs/</link>
      <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/projects/huffman-rs/</guid>
      <description>&lt;p&gt;This is a CLI program using &lt;em&gt;Huffman Coding&lt;/em&gt; to compress files. The program is written in &lt;em&gt;Rust&lt;/em&gt;
for efficiency.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mutability Is a Great Secret To Have</title>
      <link>/posts/mutability-is-a-great-secret-to-have/</link>
      <pubDate>Wed, 06 Mar 2019 11:39:03 +0100</pubDate>
      
      <guid>/posts/mutability-is-a-great-secret-to-have/</guid>
      <description>Resisting the urge for purity There&amp;rsquo;s a very common idea spread around in FP circles that goes something like: &amp;ldquo;Avoid mutable state&amp;rdquo;. This is a good idea, and many articles are out there talking about why this is the case. I agree with these for the most part, but sometimes people lose the forest for the trees when thinking about this goal.
Why do we want to avoid mutability? One of the biggest advantages of reducing mutable state in our code, is reducing the working parts we need to keep track of when reasoning about local pieces of code.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Mon, 04 Mar 2019 21:39:11 +0100</pubDate>
      
      <guid>/about/</guid>
      <description>This is a blog I try to contribute to regularly. I post about functional programming, networking, and other good stuff.
I&amp;rsquo;m Lúcás, and I&amp;rsquo;ve been programming for 2 years or so. I try and wet my toes in a lot of different things, and I try to program in the languages I&amp;rsquo;ve used the least.
Cats are not only my favorite animal, but objectively the best pet.</description>
    </item>
    
    <item>
      <title>Inauguration</title>
      <link>/posts/inauguration/</link>
      <pubDate>Mon, 04 Mar 2019 19:48:28 +0100</pubDate>
      
      <guid>/posts/inauguration/</guid>
      <description>I made a blog again I think this must be the third iteration of a blog I&amp;rsquo;ve tried and done.
The first was a static site with Jekyll. This went relatively well, but I kind of lost interest in contributing to it, and I can&amp;rsquo;t even remember if I did post anything noteworthy there. I think I just set the blog up and then never touched it again. 8^)
The second, and much more memorable foray into this whole blogging thing was when I decided to do without a fancy static site generator, and write a basic markdown -&amp;gt; html conversion thing myself.</description>
    </item>
    
    <item>
      <title>Bittrickle</title>
      <link>/projects/bittrickle/</link>
      <pubDate>Tue, 26 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/projects/bittrickle/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Bittrickle&lt;/strong&gt; is an implementation of Bittorrent&amp;rsquo;s UDP tracker protocol. A tracker keeps
track of peers participating in a bittorrent swarms, sharing files. Peers communicate with
the tracker in order to learn about each other. This implementation uses &lt;em&gt;Rust&lt;/em&gt; because of its
built-in UDP networking.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cauchy</title>
      <link>/projects/cauchy/</link>
      <pubDate>Tue, 22 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/projects/cauchy/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Cauchy&lt;/strong&gt; is a program to generate plots of complex functions, written in &lt;em&gt;Rust&lt;/em&gt;
&lt;strong&gt;Cauchy&lt;/strong&gt; is hardware-accelerated, using &lt;em&gt;OpenGL&lt;/em&gt; to generate the plots using the GPU.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Darby</title>
      <link>/projects/darby/</link>
      <pubDate>Wed, 07 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/projects/darby/</guid>
      <description>&lt;p&gt;This is a CLI program to take a folder of songs and play them in a random order.
SDL&amp;rsquo;s audio subsystem is used to play audio files. This program was built to accompany
&lt;a href=&#34;https://github.com/cronokirby/populate&#34;&gt;populate&lt;/a&gt;, which generates folders filled with songs,
ready for consumption by this program.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Populate</title>
      <link>/projects/populate/</link>
      <pubDate>Wed, 07 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/projects/populate/</guid>
      <description>&lt;p&gt;This is a CLI program that can recreate a music library on a new machine by downloading
the files from various sources across the web. The program parses a file
with a hierarchical description of the library to replicate , and reproduces
that structure by consuming the sources described.
The program can also split up larger albums (via FFmpeg) into individual songs if necessary.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Peerbin</title>
      <link>/projects/peerbin/</link>
      <pubDate>Thu, 01 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/projects/peerbin/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://cronokirby.github.io/peerbin/#/&#34;&gt;Live&lt;/a&gt;.
This project provides a version of websites like pastebin, or hastebin, except without
a central server to store the files; instead users send the files to eachother
via &lt;a href=&#34;https://webtorrent.io/&#34;&gt;webtorrent&lt;/a&gt;. &lt;em&gt;Elm&lt;/em&gt; is used for the main
UI components, and &lt;em&gt;Javascript&lt;/em&gt; to glue this code with the webtorrent part.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hax</title>
      <link>/projects/hax/</link>
      <pubDate>Mon, 01 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/projects/hax/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Hax&lt;/strong&gt; is a bullet hell game, in the same vein as others like &lt;em&gt;Touhou&lt;/em&gt; or &lt;em&gt;Ikaruga&lt;/em&gt;.
The game is written in Haskell, using SDL for handling the drawing logic. The game
logic benefits greatly from the use of an entity component system for handling the many entities
in the game. &lt;a href=&#34;https://hackage.haskell.org/package/apecs&#34;&gt;Apecs&lt;/a&gt; was used to provide the scaffolding
for this ECS.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ludus</title>
      <link>/projects/ludus/</link>
      <pubDate>Sat, 01 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/projects/ludus/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Ludus&lt;/strong&gt; is an emulator for the NES console, written in &lt;em&gt;Rust&lt;/em&gt;. The emulator
fully emulates, the core CPU, as well as the PPU and APU, and thus full video
and audio. The emulator also supports a handful of mappers / cartridge types, and thus
many common games such as Mario or Zelda.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Alchemy</title>
      <link>/projects/alchemy/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/projects/alchemy/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Alchemy&lt;/strong&gt; is a library over the API for the chat application
&lt;a href=&#34;http://discordapp.com/&#34;&gt;Discord&lt;/a&gt;. The library integrates over Discord&amp;rsquo;s REST
and Websocket APIs in order to help developers write applications for their chat
servers. &lt;em&gt;Elixir&lt;/em&gt; was used in order to have easy access to the concurrency involved
in juggling these various resources.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>