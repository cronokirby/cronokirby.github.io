{"componentChunkName":"component---src-templates-post-js","path":"/posts/mutability-is-a-great-secret-to-have","result":{"data":{"markdownRemark":{"id":"926dca49-6c55-526b-8f0d-3cc5d36eff56","html":"<h2>Resisting the urge for purity</h2>\n<p>There's a very common idea spread around in FP circles that\ngoes something like: \"Avoid mutable state\". This is a good idea,\nand many articles are out there talking about why this is the case.\nI agree with these for the most part, but sometimes people lose the forest\nfor the trees when thinking about this goal.</p>\n<h2>Why do we want to avoid mutability?</h2>\n<p>One of the biggest advantages of reducing mutable state in our code, is reducing\nthe working parts we need to keep track of when reasoning about local pieces of code.\nWhen each function is dependent on the global state of the application at that time, we\nnot only need to think about the parameters of that function, and what it returns,\nbut also the global state the application might be in when the function is called,\nand what effect we have on that state. By reducing mutable state, we reduce\nthe mental space we need to keep a handle on when reasoning about our code.</p>\n<p>One apparent advantage is that by disentangling our code from global state,\nwe can treat it as a black box. If the only things a function depends upon\nare its parameters, and its only effect on the world is returning some output,\nwe can treat it like a black box: we don't care <em>how</em> it works, we just care about\n<em>what</em> it does, and what properties it has.</p>\n<p>We can combine this black box property with a good set of tests, and really get\nall the advantages of this approach. The black box is extremely composable, since\nall we need to understand are the holes we can connect things with, and never\nthe inside of the box itself.</p>\n<h2>FP for clarity</h2>\n<p>Another commonly espoused advantage of FP is that of making individual pieces of code clearer.\nIn many cases, an algorithm is much better understood when explained in a declarative fashion,\nrather than the more traditional imperative way. This can often be much more concise, although\nwe should avoid confusing concise with easy to understand.</p>\n<p>We should avoid making too direct an equivalence between declarativeness and readability,\nbecause the two are not the same: it's possible to make imperative code that is readable, and likewise,\ndeclarative code that is completely unreadable. (plenty of people will claim that FP code is much more\nobscure, and they can be right at times).</p>\n<h2>The main difference between these two properties</h2>\n<p>The main difference between the <em>black box</em> property and the <em>clarity</em> property,\nis that the black box property applies to the way we compose code, and to the contracts\nthat our code respects, but the clarity property applies to the small pieces of code inside the functions we\ndefine. Where the black box property is about the box, the clarity property is about the contents\nof that box.</p>\n<p>Often people focus too much on the clarity aspect of FP, because this is the more apparent property.\nWhen writing code in FP, especially when getting used to the approach, and working on smaller snippets,\nthe clarity property is what comes to the foreground.</p>\n<p>The problem is that people focus too much on clarity and declarativeness in the small, and forget about\nthe black box property. Sometimes a declarative implementation of a piece of code isn't the clearest.\nIn those cases however, we don't have to sacrifice the black box properties of that function if we\nchoose to implement it in an imperative way. We can have a function that depends on no global state, and\ndoesn't have any visible side effects, but still using mutability as an implementation.</p>\n<h2>A small example</h2>\n<p>To illustrate a situation where a declarative decomposition of a problem ends up yielding a more obtuse implementation.\nLet's try implementing a prime sieve in python. The goal of this function is to return a list of the prime numbers up to a max value.</p>\n<pre><code class=\"language-py\">from itertools import reduce\n\ndef primes(mx):\n    return reduce(lambda l, x: l if any(map(lambda d: x % d == 0, l)) else l + [x], range(2, mx))\n</code></pre>\n<p>Now this is a somewhat contrived way of doing it, since <code>reduce</code> begs for an imperative implementation,\nbut this is a pretty easy way of doing this in a purely declarative way. As expected,\nthis function has no visible side effects, and depends only on the parameters passed to it.</p>\n<p>The only downside is that for people not familiar with <code>reduce</code> or with FP in python more generally,\nthis isn't the easiest function to understand. And even for a person quite familiar with declarative code,\nit isn't clear to follow the execution of this code.</p>\n<p>One reason for this, is that reduce introduces a bit of imperative control flow, but in a declarative way.\nThis is a necessary thing to do in a purely functional language such as Haskell, and a useful tool\nin languages that aren't as purely functional, such as python in our case. But reduce is often\nless clear than an imperative version of the same code.</p>\n<h2>Back to imperative</h2>\n<p>Let's try the code again in an imperative form:</p>\n<pre><code class=\"language-py\">def primes(mx):\n    acc = []\n    for x in range(2, mx):\n        found = False\n        for d in acc:\n            if x % d == 0:\n                found = True\n        if not found:\n            acc.append(x)\n    return acc\n</code></pre>\n<p>We no longer have a single line, but we have an easier to follow function. This is more or less just an unrolling of\nthe previous function, making all the underlying functions explicit, instead of composed together.\nThe important thing is that all the external properties satisfied by the previous function are satisfied by the current one.\nThe function doesn't have any visible side effects, and doesn't depend on any global state, just the arguments passed to it.</p>\n<h2>Summary</h2>\n<p>The more general takeaway from these examples is that declarativeness for its own sake isn't necessary,\nand that the external properties of a function are much more important to a codebase. Stateless functions\nhave the same benefits regardless of their implementation, and in fact, free us up to implement them in whatever\nway fits our requirements, be they performance, or readability.</p>\n<p>Let's try and keep the spirit of the law in mind, over the letter.</p>","frontmatter":{"date":"March 06, 2019","image":"/print12.jpg","path":"/posts/mutability-is-a-great-secret-to-have","title":"Mutability Is a Great Secret To Have","description":"Mutability is ok, as long as no one knows about it"}}},"pageContext":{}}}