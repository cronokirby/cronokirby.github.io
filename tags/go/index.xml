<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on ck-blog</title>
    <link>/tags/go/</link>
    <description>Recent content in Go on ck-blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 14 Jun 2019 20:15:10 +0200</lastBuildDate>
    
	<atom:link href="/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Data Races vs Race Conditions</title>
      <link>/posts/data-races-vs-race-conditions/</link>
      <pubDate>Fri, 14 Jun 2019 20:15:10 +0200</pubDate>
      
      <guid>/posts/data-races-vs-race-conditions/</guid>
      <description>This is a quick post about the difference between Data Races and Race Conditions, and how data structures or patterns providing freedom from data races can fail to provide race condition freedom.
The examples will be given in Go, since that&amp;rsquo;s a language with a few of the concurrent constructs that come into play here, as well as the language that sparked this blog post in the first place.
Data Races I agree almost entirely with rust&amp;rsquo;s definition of data races.</description>
    </item>
    
    <item>
      <title>Notes on Ripple</title>
      <link>/posts/notes-on-ripple/</link>
      <pubDate>Tue, 09 Apr 2019 13:04:46 +0200</pubDate>
      
      <guid>/posts/notes-on-ripple/</guid>
      <description>mermaid.initialize({startOnLoad: True}); Ripple itself I recently spent a week working on a tiny irc-like service, called ripple. The main difference between ripple and a traditional chat service is the complete lack of a central server.
In this post I explore different ways to organise decentralised services like ripple, and then explain how ripple itself works.
Organisation One of the tougher problems in taking a normal service and decentralising it is how to shape the network.</description>
    </item>
    
  </channel>
</rss>