<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Functional Programming on ck-blog</title>
    <link>/tags/functional-programming/</link>
    <description>Recent content in Functional Programming on ck-blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 14 May 2019 13:57:24 +0200</lastBuildDate>
    
	<atom:link href="/tags/functional-programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The Component Pattern</title>
      <link>/posts/component-pattern/</link>
      <pubDate>Tue, 14 May 2019 13:57:24 +0200</pubDate>
      
      <guid>/posts/component-pattern/</guid>
      <description>This post details a useful pattern for organizing stateful components in functional code. This post assumes knowledge of Haskell, up to Monad-Transformers.
The Problem The organization of a codebase is important: how the files are the laid out, and how the structures inside those files mesh together. A poorly laid out codebase can be difficult to navigate and expand. Poorly laid out code can be hard to understand, and even harder to build upon.</description>
    </item>
    
    <item>
      <title>Mutability Is a Great Secret To Have</title>
      <link>/posts/mutability-is-a-great-secret-to-have/</link>
      <pubDate>Wed, 06 Mar 2019 11:39:03 +0100</pubDate>
      
      <guid>/posts/mutability-is-a-great-secret-to-have/</guid>
      <description>Resisting the urge for purity There&amp;rsquo;s a very common idea spread around in FP circles that goes something like: &amp;ldquo;Avoid mutable state&amp;rdquo;. This is a good idea, and many articles are out there talking about why this is the case. I agree with these for the most part, but sometimes people lose the forest for the trees when thinking about this goal.
Why do we want to avoid mutability? One of the biggest advantages of reducing mutable state in our code, is reducing the working parts we need to keep track of when reasoning about local pieces of code.</description>
    </item>
    
  </channel>
</rss>