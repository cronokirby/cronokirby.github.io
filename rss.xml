<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Cronokirby's Blog]]></title><description><![CDATA[A blog about programming and other things]]></description><link>https://cronokirby.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Tue, 03 Mar 2020 09:28:25 GMT</lastBuildDate><item><title><![CDATA[Against Fullstack Data Sharing]]></title><description><![CDATA[This is a post about how I work with data in fullstack development. Specifically, I share what I think are
good patterns for sharing data…]]></description><link>https://cronokirby.github.io/posts/against-fullstack-data-sharing/</link><guid isPermaLink="false">https://cronokirby.github.io/posts/against-fullstack-data-sharing/</guid><pubDate>Thu, 13 Feb 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This is a post about how I work with data in fullstack development. Specifically, I share what I think are
good patterns for sharing data and logic between the frontend and the backend of an application.&lt;/p&gt;
&lt;p&gt;Initially, I was for sharing a lot of logic, classes, and data formats between a frontend and backend
written in the same language, but I&apos;ve come to change my mind after trying it out on a real project.&lt;/p&gt;
&lt;h1&gt;Fullstack what now?&lt;/h1&gt;
&lt;p&gt;As the title indicates, I&apos;m against &lt;em&gt;Fullstack Data Sharing&lt;/em&gt;, but what exactly do I mean by that?
I struggled to summarize the idea in a few words for the title, so let me give a more detailed
explanation of what I mean.&lt;/p&gt;
&lt;p&gt;I like building apps on the web, using Javascript. Or rather, Typescript, but the process and libraries
are the same. One advantage of JS is that you can have the same language for the backend and
frontend of your application. The backend is the code that you, the developer, are responsible for
running, and the frontend is what you send to the users of your application. The backend code is
usually run on some kind of server, and most of its work centers around a database. The frontend
presents the functionality of the backend in a nice package for the user.&lt;/p&gt;
&lt;p&gt;Anyways, you need to &lt;em&gt;do things&lt;/em&gt; on both sides, and you always have common data between the sides.
For example, if I&apos;m making a twitter clone, the concept of a &quot;Tweet&quot; exists on both the backend,
and the frontend. The backend will need to create and retrieve Tweets using the database,
and the frontend will need to display Tweets to the user, allow them to create Tweets, etc.
You need code to handle and manipulate this data on both sides, as well as ways to transfer
things between both sides.&lt;/p&gt;
&lt;h2&gt;At least 2 serialization formats&lt;/h2&gt;
&lt;p&gt;Let&apos;s focus a little bit on &lt;em&gt;serialization&lt;/em&gt;: transforming your code&apos;s representation of data
into something that can be sent over the wire, or stored in a database. &lt;/p&gt;
&lt;p&gt;There are 2 main places you need to serialize your data in a web application:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Moving data into the database&lt;/li&gt;
&lt;li&gt;Moving data between the backend and the frontend&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;JSON on the pipes&lt;/h3&gt;
&lt;p&gt;For moving data between the backend and the frontend, in 2020 the ubiquitous format is JSON. If it
were 2004, maybe I&apos;d be saying XML instead, but those days are past us. Regardless of how you&apos;re
communicating with the backend, be it with GraphQL, REST, gRPC, or something else, you&apos;ll be using
JSON, or something like it.&lt;/p&gt;
&lt;p&gt;JSON has maps, strings and lists, which can be used as the basic building blocks for pretty much
anything:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;post&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;created-at&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;2020-02-12&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;replies&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;23424234&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;3234234234&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is an example of a JSON structure, and it showcases how we can represent a lot of nifty things
with a relatively simple format. JSON is sufficient to represent a lot of our data structures.&lt;/p&gt;
&lt;p&gt;Another advantage of JSON with JS, is that we can directly serialize (simple) JS objects to JSON:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// {&quot;foo&quot;: &quot;bar&quot;}&lt;/span&gt;
&lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;foo&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;there are some caveats with this approach I&apos;ll get into a bit later, but for now we&apos;ll put a tick
in the &quot;advantages&quot; column.&lt;/p&gt;
&lt;h3&gt;ORMs in the back&lt;/h3&gt;
&lt;p&gt;So JSON&apos;s got us covered for sending things to the frontend, but what about communication between
the backend and our database? Well, this is where ORMs (usually) come in.&lt;/p&gt;
&lt;p&gt;Essentially, an ORM (Object Relational Mapping) wraps the communication between our backend
and our database, by organizing  the functionality we need from our database around the &lt;em&gt;objects&lt;/em&gt; in
our application.&lt;/p&gt;
&lt;p&gt;For example, instead of directly writing the SQL to create a Tweet, we&apos;d have a Tweet &lt;em&gt;class&lt;/em&gt;, with
a method to create a new Tweet as part of the class. We&apos;ve moved the logic needed to interact
with the database into the objects we work with themselves.&lt;/p&gt;
&lt;p&gt;Examples of ORMs in Typescript-land include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://mongoosejs.com/&quot;&gt;Mongoose&lt;/a&gt; for MongoDB&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://typeorm.io&quot;&gt;TypeORM&lt;/a&gt; for SQL like databases&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For every sentence I could write about ORMs here, there&apos;s about 10 blog posts debating their merits;
I won&apos;t go into that here. Those blog posts do a much better job of illustrating the pros and cons
than I ever could in this post.&lt;/p&gt;
&lt;p&gt;Now, what I do want to highlight about ORMs is that they impose at least one representation of data
onto you. Before having a database, I might have worked with Tweets using one class, or representation,
but if I want to now use TypeORM (for example), then I need to introduce a new representation
of Tweets, or tailor the existing one to much how TypeORM needs things to be.&lt;/p&gt;
&lt;p&gt;Let&apos;s take one of the examples on TypeORM&apos;s homepage:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ts&quot;&gt;&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;@&lt;span class=&quot;token function&quot;&gt;Entity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    @&lt;span class=&quot;token function&quot;&gt;PrimaryGeneratedColumn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    id&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    @&lt;span class=&quot;token function&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    firstName&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    @&lt;span class=&quot;token function&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    lastName&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    @&lt;span class=&quot;token function&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    age&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;TypeORM requires us to create a &lt;em&gt;Model&lt;/em&gt;, as they call it, which is the representation TypeORM prefers
for our data. Now, this library isn&apos;t being arbitrary in requiring us to annotate our class like this.
The reason TypeORM requires us to have &lt;code class=&quot;language-text&quot;&gt;@Column&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;@PrimaryGeneratedColumn&lt;/code&gt; annotations is
because it uses this to figure out how our Model maps onto our database.&lt;/p&gt;
&lt;p&gt;When you use an ORM, you move the database-friendly representation of your data from the database
itself, into your application. In exchange, you don&apos;t need to convert from your application&apos;s
representation into your database&apos;s.&lt;/p&gt;
&lt;p&gt;Without an ORM, you&apos;d have the database&apos;s view of things, as defined by how your table is defined
in SQL, say:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    id &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    firstName &lt;span class=&quot;token keyword&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    lastName &lt;span class=&quot;token keyword&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    age &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and then you&apos;d have to write code to convert from what your application has defined a User to be,
into what the SQl says.&lt;/p&gt;
&lt;p&gt;With an ORM, you have to define what a User is based on what your ORM requires, but it takes care
of the database for you.&lt;/p&gt;
&lt;h3&gt;No ORM?&lt;/h3&gt;
&lt;p&gt;If you don&apos;t use an ORM, you still have a serialization format, since you need to convert your data
into something that the database can use, either by writing some SQL, in the case of a relational
database, or massaging it into the right document format, for the hip and cool NoSQL document
databases.&lt;/p&gt;
&lt;h2&gt;Sharing in this Context&lt;/h2&gt;
&lt;p&gt;So you have some representation of your entity / concept in your application, be it in the form
of a class, an ORM model, an interface, a comment, etc. What I mean by sharing, is literally having
the code that defines this be used both in the backend of the application, and the frontend of
the application.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// shared/tweet.ts&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Tweet&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  id&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  content&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  authorID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then &lt;code class=&quot;language-text&quot;&gt;frontend/showtweet.ts&lt;/code&gt; imports this file, and so does &lt;code class=&quot;language-text&quot;&gt;backend/createtweet.ts&lt;/code&gt;. So now
this code is shared between both the frontend and the backend.&lt;/p&gt;
&lt;h3&gt;Advantages&lt;/h3&gt;
&lt;p&gt;This approach does have its merits, and at first I thought it was good as well. The main advantage
here is respecting the &quot;Don&apos;t Repeat Yourself&quot; principle.&lt;/p&gt;
&lt;p&gt;A commonly heard mantra in programming is &lt;strong&gt;DRY&lt;/strong&gt;, and using the same representation of data
on both the backend and the frontend is definitely respecting DRY, at least literally.
The alternative does involve repeating what you mean by a &lt;em&gt;Tweet&lt;/em&gt;, or having two slightly
different concepts of a &lt;em&gt;Tweet&lt;/em&gt;. This repetition can lead to problems if the two occurrences
grow out of sync.&lt;/p&gt;
&lt;h3&gt;Disadvantages&lt;/h3&gt;
&lt;p&gt;The rest of this post is dedicated to explaining the disadvantages of sharing your data representations
verbatim between the frontend and the backend. I think there are enough disadvantages to warrant
avoiding this approach (at least in most cases), but I already announced that in the title, didn&apos;t I?&lt;/p&gt;
&lt;h1&gt;Sharing your ORM model is &quot;fun&quot;&lt;/h1&gt;
&lt;p&gt;(And by &quot;fun&quot;, I mean &quot;painful&quot;, as usual)&lt;/p&gt;
&lt;p&gt;The biggest issue with sharing your ORM model directly, at least with the ORMs I know of, is that
the ORM depends on the database. More specifically, an ORM library is going to have a dependency
on the database driver it wraps. The database driver is the library that provides a slight
abstraction over the network protocol the database communicates with. The database driver is probably
not something you want to be shipping to your user.&lt;/p&gt;
&lt;p&gt;There&apos;s a common complaint going around that our applications, and especially those in the NPM
ecosystem, have gotten a bit too dependency-hungry. We have millions of dependencies, 8 layers deep,
and we can&apos;t stop adding more of them to our projects.&lt;/p&gt;
&lt;p&gt;Illustrated:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/node_modules_heavy.png&quot; alt=&quot;A diagram shows that .node_modules is heavier than a black hole&quot;&gt;&lt;/p&gt;
&lt;p&gt;One reason for this (I don&apos;t think I have the guts to pretend to diagnose the problem), is that
it&apos;s pretty easy to add a new dependency to an application, and hard to feel the costs.&lt;/p&gt;
&lt;p&gt;Well, on the backend you don&apos;t feel the costs. On the frontend you actually try to care about
your bundle size, at least if you haven&apos;t given up hope yet. If your frontend loads quickly
and your bundle size is manageable, you try and avoid adding big libraries if it&apos;s not necessary.
You might even take pride in the size of your bundle.&lt;/p&gt;
&lt;p&gt;With that in mind, importing the database driver into your frontend is probably not the best idea.&lt;/p&gt;
&lt;p&gt;If you import the ORM model directly, you&apos;re depending on the model, and thus the ORM, and so you
need to bundle the database driver in there as well.&lt;/p&gt;
&lt;h2&gt;Workarounds&lt;/h2&gt;
&lt;p&gt;Now, you can avoid bundling the database driver in the frontend, by using some kind of dummy version
of the annotations the ORM provides, which avoids actually generating the database methods for the model
you have.&lt;/p&gt;
&lt;p&gt;The problem with this is that it kind of weakens the promise of sharing code between the backend
and the frontend. The promise is that with a shared library, you use it just like any other piece of
code, on both sides of your application. There&apos;s no need for conditional logic or fooling around
with advanced settings, it&apos;s just code you import directly.&lt;/p&gt;
&lt;p&gt;If you now need to conditionally import a different version of the ORM in your frontend, you&apos;re
weakening the promise a bit. Now it&apos;s not as simple as it was before to import the shared code,
and you wonder if it might have been better to just duplicate a little bit of code instead
of trying to share those models.&lt;/p&gt;
&lt;h2&gt;The wrong Model?&lt;/h2&gt;
&lt;p&gt;Another problem with using the database&apos;s representation in the frontend is a mismatch between
what the frontend uses, and what the database has.&lt;/p&gt;
&lt;p&gt;There might be things in the database that never actually appear in the frontend. There are parts of
the database you might not use in &lt;em&gt;this specific&lt;/em&gt; frontend application, if it&apos;s not the only
consumer of your database. There might also be details of you implement your API, such as
&lt;strong&gt;Join Tables&lt;/strong&gt;, which shouldn&apos;t show up in your frontend.&lt;/p&gt;
&lt;p&gt;You might also have some parts of the data you send to your frontend be calculated on the fly,
for example, counting the number of posts. This count doesn&apos;t appear in your ORM model, since it isn&apos;t
in the database, but rather queried on demand. But because you use this count as if it were a field
in the frontend, you now have a different representation of your data in your frontend.&lt;/p&gt;
&lt;p&gt;If details like these leak through the ORM abstraction you have in the backend, then that&apos;s a sign
that you probably shouldn&apos;t be sharing these models directly with the frontend.&lt;/p&gt;
&lt;h1&gt;Creating a shared class&lt;/h1&gt;
&lt;p&gt;&quot;Okay, okay, I won&apos;t share the ORM model directly with the frontend&quot;&lt;/p&gt;
&lt;p&gt;Great! But we&apos;re not done yet, unfortunately. Let&apos;s say you&apos;ve observed my previous gripes, and
even agreed with them, so now you separate things in two:&lt;/p&gt;
&lt;p&gt;You have your ORM model, which you use for interacting with the database, and a new representation that
you share with both sides. This representation is probably a class, with some methods to do work
on the internal data.&lt;/p&gt;
&lt;h2&gt;Serialization&lt;/h2&gt;
&lt;p&gt;This part is a bit Typescript specific.&lt;/p&gt;
&lt;p&gt;If you have a simple Typescript interface, you can return that very easily from an API endpoint,
because it maps directly to JSON. Most frameworks will provide a way to just &quot;send&quot; the object
itself:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/endpoint&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;woah&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;mama&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is real convenient.&lt;/p&gt;
&lt;p&gt;Now, if you have a class, you have a problem. You can&apos;t directly send the class as JSON, now you
need to write logic to serialize your class to JSON, and logic to parse your class back from the
JSON on the frontend.&lt;/p&gt;
&lt;p&gt;If you try to just naively &lt;code class=&quot;language-text&quot;&gt;JSON.stringify&lt;/code&gt; it, you&apos;ll realize that the methods don&apos;t serialize
and can&apos;t be parsed back, so you need to always go through the class constructor on both ends.&lt;/p&gt;
&lt;p&gt;To work around this, you can separate the &quot;methods&quot; of your class into functions, and then just
work with an interface, but that kind of defeats the point of using a class in the first place.&lt;/p&gt;
&lt;h2&gt;Do you really need to share everything?&lt;/h2&gt;
&lt;p&gt;The serialization problems are more of an inconvenience. The biggest problem I have with this
&quot;share&quot; everything approach, is that you might be sharing things you don&apos;t need on the frontend,
or calculating things on the frontend you could have done in advance.&lt;/p&gt;
&lt;p&gt;For example, some fields that are necessary in the backend might not be needed on the frontend. One
common example is the ubiquitous &lt;code class=&quot;language-text&quot;&gt;id&lt;/code&gt; field, On the backend you&apos;re going to be using this one a lot,
but on the frontend, you usually don&apos;t need the &lt;code class=&quot;language-text&quot;&gt;id&lt;/code&gt; of something, outside of the URL. Having
to send this each time is a bit of a waste.&lt;/p&gt;
&lt;p&gt;The frontend usually wants &lt;em&gt;the result&lt;/em&gt; of a method, and not the logic of method. For example,
if a user has an array of Tweets as part of their representation, the frontend may want to
know the count. They may want just the count, and not even the tweets themselves. This share
everything approach will send the tweets unnecessarily, and then make the frontend calculate
the count iself.&lt;/p&gt;
&lt;p&gt;We could also include the count as part of the backend representation, but this becomes awkward
if we don&apos;t need the count for certain frontend things.&lt;/p&gt;
&lt;h2&gt;Needs aren&apos;t uniform across the frontend.&lt;/h2&gt;
&lt;p&gt;We&apos;ve talked about sharing code in a general sense, but we haven&apos;t really talked about the needs
of a frontend specifically. One aspect of a frontend you might not think about initially is how
the needs of your representation change based on which part of the frontend you&apos;re at. For example
if I&apos;m displaying all the posts, I don&apos;t need their &lt;em&gt;content&lt;/em&gt;, I just need the metadata. I only
need everything about the post on the page dedicated to that post.&lt;/p&gt;
&lt;p&gt;If my API always returns everything about the post, that&apos;s quite a waste for the main page,
where I&apos;m requesting all posts, but only using a fraction of the data for each post.&lt;/p&gt;
&lt;p&gt;Because of these varying needs, there isn&apos;t a single representation of a concept on the frontend.
Rather, there&apos;s multiple &lt;em&gt;slices&lt;/em&gt; of the same concept, which includes &lt;strong&gt;all&lt;/strong&gt; the things you
might want to know about some entity. Ideally, you&apos;d share this inclusive concept with the frontend,
and then allow it select which subset of information it needs for a specific part of the application.&lt;/p&gt;
&lt;h1&gt;What do I advocate then?&lt;/h1&gt;
&lt;p&gt;In one word: &lt;a href=&quot;https://graphql.org/&quot;&gt;&lt;strong&gt;GraphQL&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I&apos;ve been hinting at it in the way I&apos;ve described certain problems, and certain needs
the frontend has. In brief I think your &quot;shared representation&quot; should be the GraphQL structure
you provide, and the frontend can have as many slices of that representation as it needs. This
structure should not mirror the data you store, but rather provide both the data the frontend
might need, as well as the calculations it might want to do.&lt;/p&gt;
&lt;p&gt;With GraphQL, you provide all the data and calculations the frontend might want, and then each
part of the frontend can make requests for exactly the parts they need. This prevents the oversharing
of unnecessary info, since each part of the frontend can just request the fields it needs.&lt;/p&gt;
&lt;p&gt;This approach also helps avoid duplicate logic, by keeping it in the backend. Since a lot of the
methods we had previously have now become GraphQl fields, we no longer share or duplicate the
logic in the frontend. Instead, the frontend just sees the logic as if it were a static field,
which simplifies the work your frontend has to do. You can also take advantage of caching, to
avoid recalculating things. Caching class methods is possible, but a lot less convenient.&lt;/p&gt;
&lt;p&gt;You&apos;re also free to handle things however you want on the backend. You just need to implement
your resolvers. The frontend doesn&apos;t need to know which fields are stored in the database,
which are calculated, and what&apos;s actually stored in the database. The backend and the frontend
are now very decoupled, but still share a nice source of truth. GraphQL completely eliminates
the problem of serialization across API boundaries, since it will massage things to and from
JSON for you.&lt;/p&gt;
&lt;h2&gt;User-Centric Graph&lt;/h2&gt;
&lt;p&gt;You also want to avoid providing an all encompassing Graph. Instead, your graph should take a viewpoint
more specific to your application. For example, if you have a frontend application where users
interact with data specific to them, and don&apos;t have access to other user&apos;s data, then you should
provide a Graph that reflects that reality.&lt;/p&gt;
&lt;p&gt;In this case, you&apos;d have a field for the current user, rather than a field for all users, since
your frontend shouldn&apos;t be displaying all the users anyways.&lt;/p&gt;
&lt;p&gt;Do:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;graphql&quot;&gt;&lt;pre class=&quot;language-graphql&quot;&gt;&lt;code class=&quot;language-graphql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Query&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token attr-name&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; User&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Instead of:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;graphql&quot;&gt;&lt;pre class=&quot;language-graphql&quot;&gt;&lt;code class=&quot;language-graphql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Query&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token attr-name&quot;&gt;myUserID&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;
  &lt;span class=&quot;token attr-name&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$userID&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; User&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This does mean that you may end up with multiple GraphQL endpoints over a single database, which
is a good thing. You might want to provide one representation optimized for your frontend
application, and another for your analytics dashboard. This is normal, since the needs and access
restrictions of both applications are very different.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;I think you should make sharing classes and logic between the backend and frontend of your application
the exception, and not the the rule. The rule should be to share things by putting them into
your GraphQL representation. This representation acts both as a contract / source of truth between
both sides, will letting them be sufficiently decoupled.&lt;/p&gt;
&lt;p&gt;Hopefully this post was useful, and I plan to supplement it with an example application, at some point.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Review: The New York Trilogy]]></title><description><![CDATA[This is a review of The New York Trilogy written by Paul Auster in 1987. As the title says, this book is actually a trilogy of three shorter…]]></description><link>https://cronokirby.github.io/posts/review-the-new-york-trilogy/</link><guid isPermaLink="false">https://cronokirby.github.io/posts/review-the-new-york-trilogy/</guid><pubDate>Fri, 31 Jan 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This is a review of &lt;a href=&quot;https://en.wikipedia.org/wiki/The_New_York_Trilogy&quot;&gt;The New York Trilogy&lt;/a&gt; written by &lt;a href=&quot;https://en.wikipedia.org/wiki/Paul_Auster&quot;&gt;Paul Auster&lt;/a&gt; in 1987.&lt;/p&gt;
&lt;p&gt;As the title says, this book is actually a trilogy of three shorter novels: &lt;em&gt;City of Glass&lt;/em&gt;,
&lt;em&gt;Ghosts&lt;/em&gt;, and &lt;em&gt;The Locked Room&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Without spoiling the novel, I will say that it should really be taken as a whole, instead of as three
separate books that happen to share themes. At the start of the book it may not be obvious why
I think this way, but by the end I think you&apos;ll come to see what I&apos;m getting at.&lt;/p&gt;
&lt;p&gt;Each novel is structured a bit like a detective novel, with the protagonists tasked with trailing
or discovering some person each time. I&apos;ll get to the contents of each novel later though.&lt;/p&gt;
&lt;p&gt;Paul Auster&apos;s writing is very fluid, and he does an excellent job of describing how the story
&lt;em&gt;feels&lt;/em&gt; to each protagonist. When describing a scene, Auster focuses mainly on the protagonists
perception of it, rather than feeding us the details straight. The focus of the book is inherently
central to each protagonist, each story definitely skewed to their &quot;version&quot; of events.
Even though the book is mainly description, it does a good job of
keeping you interesting, never overstaying a particular scene. Each novel flows nicely between the
events keeping you on your toes with new developments and interesting premises.&lt;/p&gt;
&lt;p&gt;That being said, the book does feel like it repeats itself a bit, but that also seems to be the point
of the book, in some sense. I think Auster sought to write three novels about the same things, and
that&apos;s the appeal of the trilogy as a whole.&lt;/p&gt;
&lt;h2&gt;Common Themes&lt;/h2&gt;
&lt;p&gt;The recurring themes throughout the book / novels include &lt;em&gt;paranoia&lt;/em&gt;, &lt;em&gt;impersonation&lt;/em&gt;,
and &lt;em&gt;self-referentiality&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Throughout the book, the protagonists experience progressively mounting paranoia, as they get
more and more obsessed with their task, and wary of their surroundings. This is a common theme for
detective novels, but the degree to which the protagonists fall into this trap is elevated.&lt;/p&gt;
&lt;p&gt;Another persistent theme in all 3 novels is how each protagonist has to play the role of another person.
This happens because one of the protagonists is a writer, so he impersonates and takes on the mannerisms
of his main character, but also because the protagonists act as detectives, and so have to conceal
their own identity.&lt;/p&gt;
&lt;p&gt;The book also references itself and its author. In the first novel, the main character impersonates
a detectived named &quot;Paul Auster&quot;, after the author himself. The book also references its own novels
directly and indirectly.&lt;/p&gt;
&lt;h1&gt;Synopsis: City of Glass&lt;/h1&gt;
&lt;p&gt;City of Glass starts with our protagonist, Quinn. Quinn is a writer in New York City, who has gone
from being an accomplished writer to churning out pulp detective novels under a fake name. The
main character in his detective novels goes by &quot;Max Work&quot;, and Quinn&apos;s work as a writer involves
imagining himself as Work.&lt;/p&gt;
&lt;p&gt;One day, he starts getting distressed phone calls from a woman asking for a detective &quot;Paul Auster&quot;.
At first he ignores the calls, as he is not Paul Auster, but eventually he pretends to be that
detective and goes to visit the woman.&lt;/p&gt;
&lt;p&gt;The woman explains to him that her husband&apos;s father is getting out of prison soon, and that she&apos;d like
Paul (as she knows him) to keep an eye on the man to make sure no harm comes to her husband. Her husband,
Peter Stillman, was locked in a room as a child by his father. His father was trying to discover
the language men spoke in the garden of eden, a language in which everything you say perfectly
describes what you&apos;re thinking of. The father thought that by keeping his son locked in his room,
he would eventually digress down to speaking that original language, untainted by the influence of
modern language.&lt;/p&gt;
&lt;p&gt;At some point, their house had a fire, and Peter Stillman Jr., the son, was discovered, and Peter
Stillman Sr., the father was emprisoned for what he had put his son through.&lt;/p&gt;
&lt;p&gt;Quinn, taking upon the alias of Paul Auster, starts trailing the father, and doesn&apos;t end up discovering
much. In order to interact with the father without blowing his cover, he takes on various disguises.
He pretends to be a homeless begger, asking for change. Then he pretends to be himself, and goes up
to the father directly. Of course, since he&apos;s supposed to be Paul Auster, the detective, going
up as Quinn, the writer, is not actually revealing his identity. He takes on a third monicker,
&quot;Henry Dark&quot;, to which the father responds by telling him that it&apos;s not &quot;his true name&quot;. As if
he can tell what someone&apos;s true name is or isn&apos;t.&lt;/p&gt;
&lt;p&gt;At some point, he ends up visiting the real Paul Auster, who he thinks is actually a detective,
whose number somehow got mixed up with his at the beginning of the affair. It turns out that Paul Auster
is actually just a writer. In fact, the Paul Auster depicted in this novel is essentially the
same Paul Auster that wrote this book.&lt;/p&gt;
&lt;p&gt;Eventually Quinn loses contact with his client, who has holed herself up, along with her husband, inside of their appartment.
He decides to keep watch on the building 24/7, barely going out to eat, and trying to sleep
in minute long naps to not lose sight of the appartment. He becomes more and more paranoid, and more
and more roughed up from living on the street. Eventually, he decides to break into the appartment,
which he finds empty.&lt;/p&gt;
&lt;p&gt;Inside the appartment, he confines himself to a dark room, with nothing but his red notebook, which
he used to keep track of the case previously. This is the same room where Peter Stillman Jr. had
previously taken the habit of isolating himself from his wife and other people. Someone brings him
food every day, and eventually he runs out of pages to write in. We don&apos;t know who was bringing
him food, or why. We also don&apos;t know where he went at the end of the book.&lt;/p&gt;
&lt;p&gt;The book ends with the narrator telling us of his discovery of the empty appartment, and the notebook.
It&apos;s implied that the contents of the notebook were used to write the novel itself. In some
sense, the novel was written by its own protagonist.&lt;/p&gt;
&lt;h1&gt;Synopsis: Ghosts&lt;/h1&gt;
&lt;p&gt;In this novel, the protagonist, Blue, is tasked with following a man named Black, by his client, White.&lt;/p&gt;
&lt;p&gt;He follows Black around everyday, writing down everything he sees. He notices that Black spends
most of the day writing in his study. His contact with his client is minimal, but when he tries
to catch his client putting his monthly cheque in his mailbox, he sees a masked man doing
the same. He then gets a mysterious message from his client telling him that he does not like
being watched.&lt;/p&gt;
&lt;p&gt;Eventually, Blue starts to get the suspicion that there&apos;s no purpose to his tracking Black, and
this is all an elaborate plot to mess with his head. He learns that Black has also been tasked with
following him. Black has been writing in his own book everyday about what Blue has been doing.&lt;/p&gt;
&lt;p&gt;At the end of the novel comes an almost inevitable confrontation between the two detectives.
At this end, Black threatens Blue, and they both realize that they&apos;re the same person.&lt;/p&gt;
&lt;p&gt;The ending is confusing, but upends the entire novel. We realize that nothing in the novel really
happened, that it&apos;s all a metaphore for a man grappling with his own identity.&lt;/p&gt;
&lt;h1&gt;Synopsis: The Locked Room&lt;/h1&gt;
&lt;p&gt;This novel begins with an introduction to our protagonist, who is very similar to Quinn from
the first novel. Our main guy is an unaccomplished writer, who makes a meager living from writing
articles in magazines.&lt;/p&gt;
&lt;p&gt;One day, the wife of his childhood friend, Fanshawe, calls him, because her husband has
gone missing, living her and their baby son alone. From this point on, he&apos;s disappeared long enough
to be considered dead, and she just wants someone to make use of all the writings he left behind.&lt;/p&gt;
&lt;p&gt;Over the years, Fanshawe managed to accumulate many binders worth of writings, ranging from poems,
to plays, to full novels. Our protagonist is now charged with taking these literary pieces and
editing them to be fit to publish.&lt;/p&gt;
&lt;p&gt;The books are excellent. This turns out to be no surprise, given how Fanshawe was when our main character
knew them as a child. In fact, Fanshawe was somewhat of a child prodigy. Fanshawe excelled
not only in school, but also in baseball. He was more mature than his peers, and perhaps even
his own parents. Throughout their childhood together, the main character knew of Fanshawe&apos;s writing,
but never got the chance to read it. He always had the hunch that it was amazing, given Fanshawe&apos;s
excellence in every other domain.&lt;/p&gt;
&lt;p&gt;As it turns out, Fanshawe was admired greatly by the protagonist, in almost all ways possible.
The protagonist admired him as an author, as a husband, and as a moral person. Fanshawe was always
the person they strived to be, but could never live up to.&lt;/p&gt;
&lt;p&gt;As Fanshawe&apos;s sudden disappearance goes from a great surprise to the status quo, the protagonist
ends up marrying his wife, and adopting his son as his own. From then on, the new couple lives
as if Fanshawe is dead. At this point, our main character receives a letter from Fanshawe,
telling him that he&apos;s grateful for the protection of his wife, and caring for his son.
But, under no circumstances should the main character look for him. If he manages to find
Fanshawe, he won&apos;t hesitate to kill him.&lt;/p&gt;
&lt;p&gt;From this point on, the main character becomes more and more obsessed with finding Fanshawe,
despite this warning. He makes up the excuse of writing a biography about his childhood friend,
while secretly trying to figure out his whereabouts. The protagonist himself doesn&apos;t even
realize this is a front at first, but he slowly gets roped deeper and deeper into this obsession.&lt;/p&gt;
&lt;p&gt;At some point, he ends up talking to Fanshawe&apos;s mother, once again under the guise of
writing a biography. His mother tells him how much pain Fanshawe caused her. It turns out that
despite his moral character in other respects, he was always extremely cold with his own mother.
As a child, he even refused to let her touch him after a certain age. He refused to send
her letters as an adult, instead sending veiled messages in the letters to his sister.&lt;/p&gt;
&lt;p&gt;It&apos;s at this point that the pair have sex, the main character in a sense, taking joy in surpassing
Fanshawe, and knowing that his mother is using him to get back at her own son. It&apos;s at this point
that he consummates the role of Fanshawe.&lt;/p&gt;
&lt;p&gt;He gets more and more obsessed with Fanshawe, to the point of going on a binge drink in Paris,
and accusing a certain Peter Stillman of being Fanshawe himself. It&apos;s after this episode that
he drops all pretenses of writing a biography about the main, and comes to terms with his obsession.
He wants to end this whole charade, and start a truly comfortable life with Fanshawe&apos;s wife, living
as if he was truly dead, and getting rid of the rest of his things.&lt;/p&gt;
&lt;p&gt;After a few years, our main character receives a letter from Fanshawe, asking him to talk one more time.
He meets Fanshawe on the other side of a locked room, with threats of suicide if he tries to
breach the door. Fanshawe tells him that he&apos;s been holed up in this dark room, scribbling in
his red notebook, with a woman occasionally bringing him food. Today is the day that he&apos;s decided
to die.&lt;/p&gt;
&lt;p&gt;Fanshawe then tells us that he&apos;s been fleeing from a man named Quinn, who almost caught him
twice in New York. In fact, during one of the episodes, Quinn thought he was following Fanshawe,
but Fanshawe, in fact was following him. At some point, he even camped outside of the main character&apos;s
appartment to observe his wife and their child. He took the name of Henry Dark, which is how
he evaded discovery these past few years. He finally gives our protagonist the red notebook
which he&apos;s been using as a sort of diary.&lt;/p&gt;
&lt;p&gt;Inside this book, we find a rough account of the book we&apos;ve just finished reading.&lt;/p&gt;
&lt;h1&gt;Self References&lt;/h1&gt;
&lt;p&gt;The climax of the book is the ultimate reveal of how the book references itself. At the beginning you
have the small reference to the author, &lt;em&gt;Paul Auster&lt;/em&gt;, who appears as a character. This little
moment can be scene as just a little wink and nodd, sort of like Stan Lee appearing in a Marvel movie.
But the ending of the book seems to reveal that all three novels are in fact the same novel, and
are all twisted versions of the same event.&lt;/p&gt;
&lt;p&gt;The climax opens up more questions than it answers though. Is the protagonist the same
in all three novels? O is Fanshawe the protagonist in the first novel? If Fanshawe is Black,
then who is Blue? Who is Peter Stillman?&lt;/p&gt;
&lt;p&gt;Some events take on a new meaning when interpreted in the light of this revelation. In &lt;em&gt;City of Glass&lt;/em&gt;
when the main character sleeps on the street while stalking his client&apos;s appartement, this seems
to match up with Fanshawe stalking his wife in the &lt;em&gt;The Locked Room&lt;/em&gt;. Fanshawe being locked up
in a secluded room, and having food delivered to him matches up with the ending of &lt;em&gt;City of Glass&lt;/em&gt;.
But if Fanshawe is the same Quinn that locked himself up at the end of &lt;em&gt;City of Glass&lt;/em&gt;, why does
he say that Quinn the detective was trailing him?&lt;/p&gt;
&lt;p&gt;The more you try to unravel the tangle presented in front of you, the more you get stuck
in the self referentiality of the book. The ending of &lt;em&gt;Ghosts&lt;/em&gt; is almost a metaphor
for the book as a whole. You&apos;re left confused as to what the novel means after Black exposes
the whole thing as a charade. You feel as if the book itself is some kind of a charade by
the end of it.&lt;/p&gt;
&lt;h1&gt;Impersonation&lt;/h1&gt;
&lt;p&gt;Because of its oroboros like structure, the book is almost an impersonation of itself at times.
Reading &lt;em&gt;Ghosts&lt;/em&gt; straight after &lt;em&gt;City of Glass&lt;/em&gt;, it&apos;s as if the second novel is pretending to
be the first. They both involve detectives getting progressively more paranoid, and progressively
more obsessed with their case. The final novel is the most interesting in this respect,
since it pretends to be a different novel right up until the end, where it reveals itself
to be the same novel we&apos;ve just read twice.&lt;/p&gt;
&lt;p&gt;The characters inside of each novel are never authentic to themselves or other people either. Quinn
spends so little time as himself, Quinn the writer, that when he presents his &quot;true self&quot; to
Peter Stillman, he does it as just another disguise, the same way he was a homeless beggar
the other day. Throughout the novel, Quinn is impersonating Paul Auster, a person who
turns out to never even exist. In fact, can we even say that the Paul Auster we &lt;em&gt;do&lt;/em&gt; encounter
is real? Maybe the author presenting a fake version of himself inside his book, we have no way of
knowing whether there is even any link between reality.&lt;/p&gt;
&lt;p&gt;Of course, the protagonist in &lt;em&gt;The Locked Room&lt;/em&gt; spends the novel becoming Fanshawe himself, taking
on his wife and child, and even his literary work. This makes sense, because he has admired
Fanshawe all of his life, but he can&apos;t even admit it. The irony here is that Fanshawe has abandoned
his own name, and taken on many others in its place. Fanshawe even refuses to be called
by his own name at the end of the book.&lt;/p&gt;
&lt;p&gt;The only link we have between the truth and what we&apos;re told is the words that are said. The book
reveals itself to be what&apos;s left of the fragments of the red notebook referenced a few times.
Because of this, we can&apos;t even be sure if the book is a &quot;true&quot; retelling of the fictional events.
The book is just an impersonation, a fabrication of the fiction its author dreamt up.&lt;/p&gt;
&lt;p&gt;We also don&apos;t know which novel is actually impersonating the other. Maybe Fanshawe&apos;s telling
of things is correct, and the first two novels are just his experience as told in his notebook.
Perhaps Fanshawe is spinning lies, and the three novels are disconnected after all. This confusion
is exactly what the author was looking for.&lt;/p&gt;
&lt;h1&gt;The limits of language&lt;/h1&gt;
&lt;p&gt;One aspect of &lt;em&gt;City of Glass&lt;/em&gt; that gains in importance when considering the book as a whole is
the idea of a &quot;true language&quot; one spoken at the dawn of man, and one in which no lies could be told,
in which thoughts could be precisely expressed without any loss of meaning.&lt;/p&gt;
&lt;p&gt;In the novel, Peter Stillman was obsessed with finding this language, to the point of imprisoning
his own son in a dark room in hopes that he would digress down to speaking it. He also spends
a good portion of the novel collecting random objects on the street. We later learn that he collects
these objects to give them &quot;true names&quot; in his invented language.&lt;/p&gt;
&lt;p&gt;At first, this just seems like a fun bit of interest in &lt;em&gt;City of Glass&lt;/em&gt;. The tower of babel, and the
true language are motivators for the plot, but don&apos;t seem all that important in the end. But
all this talk on self referentiality makes you really appreciate these ideas. If the book is,
as it claims, taken from the fragments left behind in the red notebook, then how can you be
sure that it&apos;s a true expression of its events?&lt;/p&gt;
&lt;p&gt;Because language cannot truly express ideas, the book can only ever be an impersonation, a presentation
of these events. All three novels are fake presentations of what happened, because it isn&apos;t even
possible to present what happened without distorting the events. Just by putting words
onto the page, you change the meaning of what was in your head a few moments ago.&lt;/p&gt;
&lt;p&gt;Perhaps that&apos;s why Fanshawe was disgusted at reading his own writing. His vision of the world
pales in comparison to what his words were able to express. The tragedy is that his vision
is stuck inside his head, and he has no one to share his disappointment with. Everyone else
knows only the words, and not his own ideas.&lt;/p&gt;
&lt;p&gt;Paul Auster&apos;s self portrayal is a reminder of this facade, because of course the author himself
isn&apos;t depicted in the novel with all the nuance he would have in real life. In the novel he&apos;s
just a caricature of himself, and no matter how much effort the author puts into his own description
there&apos;s nothing he can do to ever truly describe himself.&lt;/p&gt;
&lt;h1&gt;Is a person more than perception?&lt;/h1&gt;
&lt;p&gt;This brings us to the final idea I&apos;d like to touch upon.&lt;/p&gt;
&lt;p&gt;We only know these fictional characters through the words describing them. We take it for granted
that these characters are fictional, and don&apos;t find it odd that they&apos;re not real at all. When our
protagonist becomes crazier and crazier, we can empathise with them through our own experience,
but we understand that we&apos;re empathising with the expression of their experience, and not
with a real person&apos;s experience. We&apos;re just feeling what the author attempted to make us feel
by putting words to a page.&lt;/p&gt;
&lt;p&gt;But in some sense, real interactions aren&apos;t fundamentally different. We can only experience
other people through our interactions with them. We can never experience another person the
way they experience themselves. Because of this, each person is only an impersonation
of their true selves. If they could experience themselves the way we do, they would be astonished
and perhaps even apalled, at the differences between their own self and our vision of them.&lt;/p&gt;
&lt;p&gt;When you get to know a person through how they talk to you, you&apos;re getting to know the sum of
your interactions with them, regardless of whether or not they&apos;re being honest. If someone
is dishonest, we realize that how we think of them is false, but we never see the facade even
in honesty.&lt;/p&gt;
&lt;p&gt;Because, even when a person is being honest, our actions and words can never portray the true
complexity of our own character. As much time as you can have spent with a person, you can never
truly understand what it is to &lt;em&gt;be&lt;/em&gt; them, or even who they &lt;em&gt;truly&lt;/em&gt; are.&lt;/p&gt;
&lt;p&gt;Even if you had a twin, there&apos;d always be this seed of doubt. Unless you experienced exactly
the same things, in the same way, how do you know that your twin doesn&apos;t have a different
way of thinking than you do. In practice, twins often have different personalities,
different mannerisms, that develop as they age. So it becomes immediately obvious that you can&apos;t
truly know your twin, the way you know yourself.&lt;/p&gt;
&lt;p&gt;Perhaps it&apos;s this distinction that allows us to define ourselves. We can define ourselves
as the only human we can truly experience. Our consciousness is the truest thing we know,
truer than any other kind of human interaction. We&apos;re the only other humans with which
we share a consciousness, as weird as it is to put it that way.&lt;/p&gt;
&lt;p&gt;But even then, we can ask ourselves, is my perception of myself just another facade? If I observe
myself through language, how can I be sure that my expression of my own consciousness is not
a reductive impersonation of my true self. Furthermore, what about the parts of myself
I don&apos;t understand? If I don&apos;t understand some parts of myself, that must mean that my
own experience is that of an impersonation of my own person, and not my true self.&lt;/p&gt;
&lt;p&gt;If I can only experience myself through my own thoughts and feelings, how do I know
I&apos;m not missing fundamental rules to how I tick, or fundamental impulses that guide my actions,
impulses of which I&apos;m not even aware?&lt;/p&gt;
&lt;p&gt;To understand that there&apos;s no solution is to solve the problem.&lt;/p&gt;
&lt;h1&gt;Should you read it?&lt;/h1&gt;
&lt;p&gt;Although I did venture a bit into metaphysical territory there at the end, I can assure you
that if that&apos;s not your thing, there&apos;s no need to worry, because the book doesn&apos;t actively
venture into it either. It&apos;s more of an open path to explore, after having read the book.&lt;/p&gt;
&lt;p&gt;Reading the book literally provides an enjoyable experience, with tight prose and engaging
stories, even at the first degree. But, for me, the greatest value of the book comes from
rereading it, and trying to understand how everything knots together. Or rather, how
nothing fits, and nothing makes sense. How the author did his best to make things contradict,
as is typical of your post-modern fiction.&lt;/p&gt;
&lt;p&gt;So I&apos;d recommend this book, for people looking to think, or looking to divert themselves.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Integrating Notes and SRS]]></title><description><![CDATA[This is a rough braindump about a project I've been thinking about recently. A better way of using notes? So i've been tinkering around with…]]></description><link>https://cronokirby.github.io/posts/integrating-notes-and-srs/</link><guid isPermaLink="false">https://cronokirby.github.io/posts/integrating-notes-and-srs/</guid><pubDate>Fri, 10 Jan 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This is a rough braindump about a project I&apos;ve been thinking about recently.&lt;/p&gt;
&lt;h1&gt;A better way of using notes?&lt;/h1&gt;
&lt;p&gt;So i&apos;ve been tinkering around with better systems for taking notes recently. I&apos;m not a big
fan of keeping notes, around because I don&apos;t find myself actually revisiting them, and when I do,
I don&apos;t get much value out of it. On the other hand, my experience with language learning has definitely
showed me how effective spaced repetition is when it comes to keeping things in your head.&lt;/p&gt;
&lt;p&gt;So it&apos;s not that notes are completely useless, but rather that the main value I get out of
them is in making them. Making notes, especially after having followed a lecture, forces me
to organize that information. It&apos;d be nice to use this effort to feed into an SRS system,
to also get the benefit of not losing that information over time&lt;/p&gt;
&lt;h2&gt;What it might look like&lt;/h2&gt;
&lt;p&gt;It&apos;d be nice to have a system that allows you to take notes, and also include snippets to enter into
an SRS system automatically, and this is exactly the thing I&apos;ve been tinkering around with recently.
Right now, I&apos;m just at the phase where I&apos;m thinking of how to even organise data structured in this way.&lt;/p&gt;
&lt;p&gt;One goal I&apos;d like to preserve is that the notes themselves, along with the SRS snippets they contain,
should be text files, and worked on through your favorite editor. I don&apos;t really want to get into
creating an integrated web editor right now.&lt;/p&gt;
&lt;p&gt;Because of this, all the information about SRS snippets needs to be included there as well.&lt;/p&gt;
&lt;h3&gt;SRS snippets&lt;/h3&gt;
&lt;p&gt;SRS snippets can be very general, but there needs to be three things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Some kind of prompt, that asks you to recall information&lt;/li&gt;
&lt;li&gt;The information you were supposed to recall&lt;/li&gt;
&lt;li&gt;(Optionally) extra data to accompany that information&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The main point of SRS snippets is to be able to have flashcard like things to recall periodically.
The SRS part is about spacing the reminders for this snippets in order to keep them fresh in memory.&lt;/p&gt;
&lt;p&gt;Now, you could generate SRS snippets from the text automatically, but that&apos;s not the simplest
thing, now is it? You also want to have decent control over these things, and this isn&apos;t
the best way to do that either.&lt;/p&gt;
&lt;h3&gt;Sections&lt;/h3&gt;
&lt;p&gt;I have two primary use cases in mind for sections.&lt;/p&gt;
&lt;p&gt;I like making big summaries for courses I&apos;m taking. For example, writing up a nice organised summary
on a Electromagnetism. I want this summary to appear as a single section, instead of disorganised sections.&lt;/p&gt;
&lt;p&gt;On the other hand, I also like working on a lot of different smaller things over
the course of a day. I also have subjects where my thoughts aren&apos;t organised into large summaries,
but rather small snippets orbiting around the topic.&lt;/p&gt;
&lt;p&gt;For these, it&apos;s better to have invidual sections that are always shown together, and then you can organise
all of the sections related to a topic together.&lt;/p&gt;
&lt;h3&gt;Other concerns&lt;/h3&gt;
&lt;p&gt;You also want to be able to include things like, math (via LaTeX), code highlighting, images, etc.
And you want to be able to structure the notes the way you would if you were writing it all in pure markdown.&lt;/p&gt;
&lt;p&gt;I think that this makes markdown a good starting point for this kind of system. You can easily
extend it with extra syntax for handling sections and what not. Another Idea I had is that it&apos;s likely
better to encode most of the information inside the section headers themselves.&lt;/p&gt;
&lt;p&gt;My main reason
coming from how I use physical notebooks. I&apos;ve come to prefer just working in a single notebook,
in a linear fashion, writing down whenever I switch to a different context.
I want to keep this way of working, even as I work on different things. To this effect, I might end
up keeping a daily log, filled with a bunch of sections. The system would end up filtering and sorting
these different sections into the correct topics afterwards.&lt;/p&gt;
&lt;p&gt;Because of this filtering and partitioning system, it doesn&apos;t make much sense to place too much weight on the
filesystem. The hierarchy that you might infer from the filesystem might not actually be reflected on what sections
exist and the topics they talk about. I think it&apos;s best to ditch a strict reliance on organising based
on files, and instead focus on sections, and then let people organize their sections however they please.&lt;/p&gt;
&lt;h1&gt;What syntax should we use?&lt;/h1&gt;
&lt;p&gt;A lot of markdown files include a header section allowing YAML (this one included):&lt;/p&gt;
&lt;h3&gt;Sections&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;md&quot;&gt;&lt;pre class=&quot;language-md&quot;&gt;&lt;code class=&quot;language-md&quot;&gt;&lt;span class=&quot;token hr punctuation&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;token title important&quot;&gt;title: &quot;Integrating Notes and SRS&quot;
&lt;span class=&quot;token punctuation&quot;&gt;---&lt;/span&gt;&lt;/span&gt;

The content of the post&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I think it&apos;s a good idea to reuse this as a section header. The main difference is that we allow parsing this anywhere
in the file instead of just at the beginning.&lt;/p&gt;
&lt;p&gt;We keep treating the content we see as part of that section until we reach&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The end of the file&lt;/li&gt;
&lt;li&gt;The beginning of a new section&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A section header might end up looking like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;md&quot;&gt;&lt;pre class=&quot;language-md&quot;&gt;&lt;code class=&quot;language-md&quot;&gt;&lt;span class=&quot;token hr punctuation&quot;&gt;---&lt;/span&gt;
section: &quot;My beautiful section&quot;
description: &quot;This is a summary about computational mechanics&quot;
tags:
  &lt;span class=&quot;token list punctuation&quot;&gt;-&lt;/span&gt; Physics
  &lt;span class=&quot;token title important&quot;&gt;- Programming
&lt;span class=&quot;token punctuation&quot;&gt;---&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;SRS snippets&lt;/h3&gt;
&lt;p&gt;For the SRS snippets, you want a way of specifying the prompt and information / extra sections.
I&apos;ve been thinking of doing it like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;md&quot;&gt;&lt;pre class=&quot;language-md&quot;&gt;&lt;code class=&quot;language-md&quot;&gt;--?
&lt;span class=&quot;token title important&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;#&lt;/span&gt; This is valid markdown&lt;/span&gt;

And a question?
--!

Here&apos;s the answer.

&lt;span class=&quot;token bold&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;token content&quot;&gt;still valid markdown&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;**&lt;/span&gt;&lt;/span&gt;
--?&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a spin off the section header. It&apos;s nice to have similar syntax, in my opinion, because it avoids adding
too much unnatural syntax to what&apos;s supposed to more or less be readable in raw form. The point of using
markdown over JSON is that you can read the markdown file ignoring the extra syntax and get a pretty legible
experience. Trying that with JSON is going to yield a &quot;fun time&quot;.&lt;/p&gt;
&lt;h1&gt;What should we output?&lt;/h1&gt;
&lt;p&gt;In the end, I think providing a website is the best way to have an interactive way of exploring things.
It&apos;s also what I would&apos;ve ended up going for even without interactivity, as I think getting things to look
nice is easier there, as much as people complain about CSS. In the end, I do think having a nice presentation
for information makes things easier.&lt;/p&gt;
&lt;p&gt;So if we&apos;re doing a website in 2020, we&apos;re going to have to quickly navigate
the fork in the road between static rendering, and using a Javascript framework of some kind.&lt;/p&gt;
&lt;p&gt;With static rendering, we&apos;d generate all the ways of organising this information in advance, and then the website
would link between everything. The downside of this is that we&apos;re fixed into a constrained way of doing things,
and we can&apos;t easily filter based on user inputs.&lt;/p&gt;
&lt;p&gt;With a Javascript, the website is our oyster when it comes to organising what we see.
I also enjoy working with Javascript frameworks, so that&apos;s probably going to be what I end up doing.&lt;/p&gt;
&lt;p&gt;To that end, we should generate some encoding of the sections that&apos;s easier to use in a programming language,
like JSON, for example. With a bunch of JSON files generated we can serve those statically, along
with the Javascript bundle generated by our frontend framework. The application than consists of these two parts.&lt;/p&gt;
&lt;p&gt;I also plan on this being a relatively personal tool, which makes it&lt;/p&gt;
&lt;h1&gt;Persistence&lt;/h1&gt;
&lt;p&gt;In order to make the SRS work, we need to integrate some kind of quizzing into the frontend application.
We also need to store the results of these quizzes somewhere on the user&apos;s computer. In these cases, where
I&apos;m storing some kind of persistent state for an end application, SQLite is my go-to. The nice thing with SQLite
is that everything goes into a single file. This makes syncing between devices possible just by copying the database
file over (it shouldn&apos;t ever grow that large, if we don&apos;t store the actual questions in the database).&lt;/p&gt;
&lt;p&gt;As for the actual text files themselves, I would end up keeping them in version control(you could put the SQLite DB in here too).
This allows you to share your notes on things with other people too, which can be a plus.&lt;/p&gt;
&lt;h1&gt;More to come&lt;/h1&gt;
&lt;p&gt;Well this was just a braindump as a start form some thoughts about this project. I thought I might
as well put this on my blog, because it&apos;s a bit lacking in posts, and I think some people might gain some benefit from it.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React Pitfalls: useState initialization]]></title><description><![CDATA[Summary This is a quick post about a "gotcha" I encountered recently in a React application.
This involved the use of React's  hook, which…]]></description><link>https://cronokirby.github.io/posts/react-pitfalls-useState/</link><guid isPermaLink="false">https://cronokirby.github.io/posts/react-pitfalls-useState/</guid><pubDate>Thu, 09 Jan 2020 09:10:11 GMT</pubDate><content:encoded>&lt;h1&gt;Summary&lt;/h1&gt;
&lt;p&gt;This is a quick post about a &quot;gotcha&quot; I encountered recently in a React application.
This involved the use of React&apos;s &lt;code class=&quot;language-text&quot;&gt;useState&lt;/code&gt; hook, which had a subtle difference
between how I thought the hook worked, and how it actually worked.&lt;/p&gt;
&lt;h1&gt;React Hooks&lt;/h1&gt;
&lt;p&gt;If you&apos;re already familiar with hooks in React, feel free to skip this section. This
is just a recap for those out of the loop.&lt;/p&gt;
&lt;p&gt;Although the first real framework I worked with was &lt;em&gt;Vue&lt;/em&gt; (I don&apos;t count the one application
I built with JQuery as having used a framework), I&apos;ve been using &lt;em&gt;React&lt;/em&gt; a ton lately, and
it&apos;s really been growing on me. There&apos;s a lot of advantages to being the &quot;top dog&quot; in the
framework game, and React&apos;s popularity gives you access to a large ecosystem, and great
patterns for working on frontend applications.&lt;/p&gt;
&lt;p&gt;One thing I really like about React is the recent &quot;hooks&quot; feature.&lt;/p&gt;
&lt;p&gt;Previously, react distinguished between &lt;em&gt;function&lt;/em&gt; components, which took in some parameters,
called &lt;em&gt;props&lt;/em&gt;, and returned some HTML to be rendered, e.g.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;TitleCard&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; name &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Hi my name is &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You also had &lt;em&gt;class&lt;/em&gt; components, which at first resemble &lt;em&gt;function&lt;/em&gt; components:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TitleCard&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Hi my name is &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But class components also have a lot of other features in addition to just rendering some data.
Notably, they have access to state:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Counter&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;count&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This component will render a count, and clicking on the button inside that component will increment
the state of that component.&lt;/p&gt;
&lt;p&gt;Having a clear way to use state, and other effects like network requests, etc was something missing
from function components. That&apos;s where hooks come in. Hooks, in brief, allow you to use
these things in function components.&lt;/p&gt;
&lt;p&gt;For example, if we wanted to take our &lt;code class=&quot;language-text&quot;&gt;Counter&lt;/code&gt; component from the previous example
using a function component with hooks, it&apos;d look like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setCount&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; c &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The hook provides us with two values: &lt;code class=&quot;language-text&quot;&gt;count&lt;/code&gt;, and &lt;code class=&quot;language-text&quot;&gt;setCount&lt;/code&gt;. The idea is that
&lt;code class=&quot;language-text&quot;&gt;count&lt;/code&gt; always holds the current value of the state, and &lt;code class=&quot;language-text&quot;&gt;setCount&lt;/code&gt; allows us to change
this value. The cool thing is that React will always &quot;do the right thing&quot; and magically
update this value and rerender the component if necessary. Neat!&lt;/p&gt;
&lt;h1&gt;Rerendering&lt;/h1&gt;
&lt;p&gt;One of the core principles when working with React is that the framework strives
to make sure that the values a component logically has is always reflected on screen.
This means that if some value changes, because of a hook, or because one of the props changed,
then a rerender needs to happen to make sure that what&apos;s on screen matches what&apos;s &quot;in the code&quot;.&lt;/p&gt;
&lt;p&gt;For example, let&apos;s split our counter in two:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ShowCounter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setCount &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; c &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setCount&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;ShowCounter &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setCount&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now the &lt;code class=&quot;language-text&quot;&gt;Counter&lt;/code&gt; component is the one actually holding the state, and the &lt;code class=&quot;language-text&quot;&gt;ShowCounter&lt;/code&gt; component
is just a simple function that shows the data given to it. In order to make sure that the user is
always seeing the actual value of the counter, React has to rerender the &lt;code class=&quot;language-text&quot;&gt;ShowCounter&lt;/code&gt; component
whenever the count passed to it changes value.&lt;/p&gt;
&lt;p&gt;This means that React will end up executing the code of the &lt;code class=&quot;language-text&quot;&gt;ShowCounter&lt;/code&gt; function again. This
is why its important to avoid firing off network requests without &lt;code class=&quot;language-text&quot;&gt;useEffect&lt;/code&gt; inside
a function component, because you only want to do certain effects when they need to be run,
and not just when the component frivously rerenders.&lt;/p&gt;
&lt;h1&gt;State is initialised only once&lt;/h1&gt;
&lt;p&gt;Now we come to the main pitfall I want to talk about in this post.&lt;/p&gt;
&lt;p&gt;Let&apos;s allow the user set a value for the counter:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; initial &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setCount&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;initial&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;ShowCounter &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setCount&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Based on our previous model, if &lt;code class=&quot;language-text&quot;&gt;initial&lt;/code&gt; changes, then the component has to rerender,
and so &lt;code class=&quot;language-text&quot;&gt;useState&lt;/code&gt; gets called with &lt;code class=&quot;language-text&quot;&gt;initial&lt;/code&gt;, and so the count becomes &lt;code class=&quot;language-text&quot;&gt;initial&lt;/code&gt;, right?&lt;/p&gt;
&lt;p&gt;Well it turns out that that&apos;s not what happens. In fact with the way &lt;code class=&quot;language-text&quot;&gt;useState&lt;/code&gt; works,
the initial value matters only &lt;strong&gt;the first time a component renders&lt;/strong&gt;. After that, it will
preserve the state between renders.&lt;/p&gt;
&lt;p&gt;This means that we need to do this instead:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; initial &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setCount&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;initial&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;initial&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;ShowCounter &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setCount&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We haven&apos;t gone over the &lt;code class=&quot;language-text&quot;&gt;useEffect&lt;/code&gt; hook in detail, but the way it works is that it executes
the callback function only if the values inside the array have changed. So here it will set the counter
to an initial value, but only when the initial value changes. This is the correct way to do
something like this.&lt;/p&gt;
&lt;p&gt;Basically, to avoid this pitfall, &lt;strong&gt;you never want to have anything dynamic inside the call to useState&lt;/strong&gt;.&lt;/p&gt;
&lt;h1&gt;Why is this the case?&lt;/h1&gt;
&lt;p&gt;Well, remember how we went over how React &quot;tries to do the right thing&quot;. Well, it turns out that
by doing things this way, you actually preserve state between rerenders, which is generally the behavior you want.&lt;/p&gt;
&lt;p&gt;For example, let&apos;s say we had something like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; name &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setCount&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; c &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we&apos;re showing a name in addition to the value of the count. We want to rerender if the count or the name
changes, since we want the user to see what the current value actually is, but we don&apos;t want the count to be
lost just because the name changed. That&apos;s why it makes sense for &lt;code class=&quot;language-text&quot;&gt;useState&lt;/code&gt; to preserve the
state between rerenders.&lt;/p&gt;
&lt;p&gt;It&apos;d require a lot more code to create the behavior of preserving state between rerenders if
it didn&apos;t work that way, but it didn&apos;t take much effort with &lt;code class=&quot;language-text&quot;&gt;useEffect&lt;/code&gt; to do what we wanted
in the other case. You generally want to try and make the more common use case easy
with frameworks, don&apos;t you.&lt;/p&gt;
&lt;h2&gt;Further Reading&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://reactjs.org/docs/hooks-intro.html&quot;&gt;React Hooks&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Structured Immersion]]></title><description><![CDATA[When it comes to language learning, one approach that I really subscribe to is immersion.
This means trying to absorb as much of the…]]></description><link>https://cronokirby.github.io/posts/structured-immersion/</link><guid isPermaLink="false">https://cronokirby.github.io/posts/structured-immersion/</guid><pubDate>Sat, 28 Dec 2019 12:13:00 GMT</pubDate><content:encoded>&lt;p&gt;When it comes to language learning, one approach that I really subscribe to is immersion.
This means trying to absorb as much of the language as possible, as often as possible.
It&apos;s often said that &quot;speaking with locals&quot; is a good way to accelerate the learning process,
and there&apos;s a lot of truth with that statement.&lt;/p&gt;
&lt;h3&gt;Comprehensible Input&lt;/h3&gt;
&lt;p&gt;One aspect of immersion that&apos;s often overlooked is the idea of &lt;em&gt;comprehensible input&lt;/em&gt;. The idea
is that the input you get in your target language is more useful if it&apos;s understandable despite
your lack of knowledge of some words or grammar. Those new language points can be assimilated because
the entire message remains comprehensible because of context, other language points you do know,
or other cues such as gestures or video.&lt;/p&gt;
&lt;p&gt;For example, if you&apos;re trying to learn Japanese, watching anime can be great (provided you don&apos;t use subtitles),
because the language used can be simple enough to understand based on the visuals on the screen.
If you can guess what people would be saying with just a few key words, then that&apos;s a good candidate
for comprehensible input, even if you don&apos;t understand most of the actual Japanese.&lt;/p&gt;
&lt;h3&gt;Comprehensibility varies&lt;/h3&gt;
&lt;p&gt;Now, not all input is very good at being comprehensible. At the beginning, most native media
will be too difficult to be effective. If you only understand 10% of the sentences in some piece of media,
you&apos;re not going to be doing much learning with that source. Conversely, as you advance, media you completely
understand won&apos;t teach you new pieces of language, although it does help you solidify your understanding
of the language, and can help with things like pronunciation and choosing native-sounding phrasing.&lt;/p&gt;
&lt;p&gt;Even worse is that it can actually be difficult to tell whether or not a piece of media is
at the right level before actually consuming it. Even if that piece of media is aimed at a native
audience with a similar language level to your own, it&apos;s possible that the topic might be one where
you&apos;re lacking a lot of vocabulary.&lt;/p&gt;
&lt;h3&gt;Context matters&lt;/h3&gt;
&lt;p&gt;For example, even if you&apos;ve watched a lot of anime aimed at young teenagers, if you start watching
a piece of science fiction aimed at the same audience, it&apos;s possible to be lacking most of the vocabulary
they&apos;ll be using. The common, everyday phrases may be engrained, but space exploration / giant robot
jargon is likely to be completely lost on you.&lt;/p&gt;
&lt;p&gt;Furthermore, if identifying whether or not a piece of media is going to make for good learning
is hard, then finding that media in the first place is even harder. Of course, my recommendation
would be primarily to focus on media you enjoy consuming anyways. After all, the point
of learning a foreign language as a hobby is to have fun, isn&apos;t it.&lt;/p&gt;
&lt;p&gt;Even then, being able to organise the media you plan on consuming based on how appropriate
it would be for your level of language would help immensely in expediting the learning process.
If you could know which show to watch next based on what your current vocabulary is, that would
save a lot of time, and make immersing a lot easier.&lt;/p&gt;
&lt;p&gt;With immersion, it&apos;s about &lt;code class=&quot;language-text&quot;&gt;quantity * quality&lt;/code&gt;, so you want to make it as easy as possible
to get a lot of good quality (i.e. level appropriate) media.&lt;/p&gt;
&lt;h2&gt;Tracking progress&lt;/h2&gt;
&lt;p&gt;One aspect of this problem that I&apos;ve briefly gone over without expliciting is tracking your
progress. In order to provide such a structure, and know what media to consume next, you need
to keep good tabs on how much language you know, and the topics where your vocabulary is lacking.
Often people will use flashcard systems like Anki in order to keep track of their progress,
but mainly to remind themselves of old vocabulary to make sure they don&apos;t forget it. The problem
is that manual entries need to be created and entered into this flashcard system, even though media is often
consumed in a way where it could be entered manually.&lt;/p&gt;
&lt;p&gt;Well, that&apos;s the introduction to some of the problems in the space of language immersion, and thankfully I think
a good deal of them can actually be addressed, thanks to the most media being digital nowadays.
Well, at least, the cheapest (free) and most easily accessible native media is going to be digital
and available on the internet.&lt;/p&gt;
&lt;h2&gt;An ideal immersion process&lt;/h2&gt;
&lt;p&gt;Ideally, here&apos;s what the daily immersion process would look like:&lt;/p&gt;
&lt;p&gt;You arrive at the &quot;dashboard&quot; and have a list of media you can consume. You simply dedicate as much
time as you want that day to consuming it: you read and watch as much as you want to that day.
The media is recommended to you based on how appropriate it is for your immersion, given your current
language level. The media will have a right amount of new vocabulary and grammar to keep you stimulated
and learning, but not enough to drown you in unknown topics. Additionally, your progress is updated
based on that media you&apos;ve consumed. There&apos;s no need to manually enter the new words or grammar points
that you learned.&lt;/p&gt;
&lt;h3&gt;Flashcard systems&lt;/h3&gt;
&lt;p&gt;Furthermore, the system can act as a flashcard system like Anki, where you automatically review the vocabulary
you previously learned, in order to make sure it stays fresh and accessible in your mind.
I won&apos;t go into the benefit of spaced-repetition systems like Anki, but for those that do benefit from them,
having automatic entries is indeed quite convenient.&lt;/p&gt;
&lt;p&gt;I think that you could actually make a system providing that functionality to users.
You could keep track of a user&apos;s progress in their target language, and use that to source media
that they immerse in, and that you use to keep track of their ongoing progress.&lt;/p&gt;
&lt;p&gt;The crux of this whole process is keeping track of a user&apos;s progress in a language. Without this
feature, none of the others are possible. All of those other aspects are consequences of exploiting
this key feature to the fullest extent.&lt;/p&gt;
&lt;h3&gt;Saving manual work&lt;/h3&gt;
&lt;p&gt;When a user sources new media for themselves, they&apos;re using their knowledge of their own progress
in order to judge whether or not that media is comprehensible enough for them. And when they&apos;re entering
new sentences into their flashcard system, they&apos;re copying over the new vocabulary from that media.
This is done, once again, using thier knowledge of their own learning process. By keeping track of
this progress in an automated fashion, we can in turn automate so many aspects of the immersion process.&lt;/p&gt;
&lt;h2&gt;Is this all just a pipe dream?&lt;/h2&gt;
&lt;p&gt;Now, that&apos;s a high level overview behind the idea behind such a system, but how feasible would
a system of this kind be? In all honesty, I&apos;m not sure if this scales to any language. I&apos;m not
even confident it would work as well for English as it would for Japanese. On the other hand,
Japanese is structured enough to make grammatical analysis quite easy.
Different langauges have different ways of building up sentences, which can make figuring out what
the user does and does not know in that sentence more or less difficult. Another difficulty relates
to figuring out what&apos;s comprehensible in a smart way, as we&apos;ll see later.&lt;/p&gt;
&lt;h2&gt;It might not be for Japanese&lt;/h2&gt;
&lt;p&gt;So, let&apos;s look at how realistic such a system could be, through the lens of Japanese.&lt;/p&gt;
&lt;p&gt;Now, one of the core components of this system is figuring out what language concepts
are in a given sentence. Now, I&apos;ve been using the &lt;em&gt;sentence&lt;/em&gt; as a basic building block of media,
and it&apos;s a good unit for splitting large bits of text. Thankfully, Japanese sentences are marked by punctuation
in actual text, and multiple lines of dialogue are easy to split even without punctuation.&lt;/p&gt;
&lt;h3&gt;Luckily simple&lt;/h3&gt;
&lt;p&gt;Japanese morphology is simple, or regular enough in order to split sentences into words in quite a consistent
way. There are a handful of tools, but the one I&apos;ve used most recently was
&lt;a href=&quot;http://taku910.github.io/mecab/&quot;&gt;MeCab&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This tool takes the form of a command line program, that accepts a stream of sentences. The output of the tool
looks like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ mecab
猫は食べた
猫	名詞,一般,*,*,*,*,猫,ネコ,ネコ
は	助詞,係助詞,*,*,*,*,は,ハ,ワ
食べ	動詞,自立,*,*,一段,連用形,食べる,タベ,タベ
た	助動詞,*,*,*,特殊・タ,基本形,た,タ,タ
EOS&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first line is our sentence, &quot;猫は食べた&quot;, literally &quot;The cat ate&quot;. The next lines are the different words
MeCab managed to find throughout that sentence, along with their pronunciation, their part of speech, etc.
For example, the first word it gives us is &quot;猫&quot; meaning &quot;cat&quot;. It tells is that it&apos;s a noun, pronounced &quot;neko&quot;, etc.&lt;/p&gt;
&lt;p&gt;Using MeCab, you can quite easily split native media into the words that compose it. This makes it easy to take all the &quot;new&quot; words
based on this classification, and add them to your flashcard system, along with the surrounding context.
Generally, you want the surrounding sentence for a given word in a flashcard system, but that&apos;s really another discussion entirely.&lt;/p&gt;
&lt;h3&gt;Except for grammar&lt;/h3&gt;
&lt;p&gt;One tricky thing that MeCab doesn&apos;t take care of, and that I haven&apos;t completely looked into solving is figuring out what grammatical
components figure in a given sentence. As we&apos;ve just seen, it&apos;s quite easy to get the words in a Japanese sentence out, but it
seems much harder to get grammar out. There are &lt;em&gt;some&lt;/em&gt; things you can do. For example, that last sentence used the past tense,
and MeCab considers the past conjugation to be a word, for some reason, so you can pick up on cues like that.&lt;/p&gt;
&lt;h2&gt;What is comprehensible enough?&lt;/h2&gt;
&lt;p&gt;Now, another problem is when to consider a piece of media suitable for consumption. Taking a sentence based approach seems
appropriate at a first glance. That is to say, we can classify each sentence with a certain comprehensibility score,
and then aggregate that score throughout the whole text, to get an overall score. We can then use that score to
rank the different pieces of media we&apos;ve managed to source previously. We would also reject pieces of media
that are too comprehensible.&lt;/p&gt;
&lt;p&gt;One simple metric would be to look at what percentage of words are known in a given sentence the user knows.
The problem with this metric comes from its simplicity: it doesn&apos;t take into account the surrounding context,
nor how easy some words are to guess. I don&apos;t have many ideas for the time being to go beyond this simple metric
however.&lt;/p&gt;
&lt;h3&gt;User input&lt;/h3&gt;
&lt;p&gt;Other approaches could include user input on whether or not they understood a sentence despite not knowing the
words in that sentence. You could use that to suggest similar sentences.&lt;/p&gt;
&lt;p&gt;That being said, even a simple metric would help immensely in ranking texts, as comprehensibility doesn&apos;t need to
be exact to be beneficial. Even ranking materials just on the words you don&apos;t know would help immensely with triaging
all the media you have available.&lt;/p&gt;
&lt;h2&gt;Sourcing media&lt;/h2&gt;
&lt;p&gt;Now we come to the problem of sourcing media.&lt;/p&gt;
&lt;p&gt;An advanced approach would be to scrape the web for material and build up a gigantic database of native media.
Although impressive and expansive, this approach would also be expensive, and fail to satisfy a key criteria:
providing media the user is actually interested in.&lt;/p&gt;
&lt;p&gt;As mentioned before, having media the user actually wants to consume is actually important in keeping the
language learning process from becoming a long march of boredom.&lt;/p&gt;
&lt;h3&gt;Accepting user submissions&lt;/h3&gt;
&lt;p&gt;An easier approach that also satisfies this criterion is accepting texts from user input. The user can submit
text from subtitles or books they&apos;re reading, along with whatever sources they want to consume eventually.
The system would also need to keep track of the order of certain texts, because for certain things, like books, you might
want to read them in a linear order. In order to help with the fun of immersion, you want to respect ordering like this.
Respecting the chronological order of media also helps with understanding that media. Obviously,
for serial media, understanding the story requires having understood most of the previous parts
of the story.&lt;/p&gt;
&lt;p&gt;This approach is also easier, because we don&apos;t have to worry about sourcing the material, and can instead
rely on the user providing us with material on their own. This is similar to how &lt;a href=&quot;japanese.io&quot;&gt;&lt;/a&gt; works,
where you enter text into their site, and then it augments it with dictionary entries and what not.&lt;/p&gt;
&lt;h2&gt;Presenting media&lt;/h2&gt;
&lt;p&gt;Another thing I&apos;d like to touch on is how you present this media to the user. One disadvantage to this text based
approach is that the user has to read. What you get out of it is that you can track the progress
of the user in the media, and thus enter these new words automatically.&lt;/p&gt;
&lt;h3&gt;Augmented immersion&lt;/h3&gt;
&lt;p&gt;When presenting text to the user, you can augment it without know the user&apos;s progress, adding
things like an automatic dictionary, sentence, copying, etc. You can use the user&apos;s progress to highlight words they
don&apos;t know. You can add the words they read to the flashcard system. You can also take into account their use
of the built-in dictionary while reading the text in order to update the flashcard system.
If they&apos;ve looked up a word, they don&apos;t know it as well as previously thought, so that word needs to be bumped
up the flashcard stack.&lt;/p&gt;
&lt;p&gt;You could also just rank the pieces of media, and then let the user read them on their own time.
The disadvantage there would be losing the augmented reading experience, as well as not being able
to automatically track progress. For example, if the user is reading a novel through the augmented
portal, you can track their position and language progress through the book. If they read it on their own,
you don&apos;t know how far they&apos;ve gotten to the book. You could let them tell you when they&apos;ve finished the whole
book, but adding that large chunk of language after the fact isn&apos;t as useful.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;To wrap things up, I think that immersion is very important for learning a foreign language, and that
making immersion as easy as possible helps making learning even easier. Having a system that
keeps track of your progress in a language can help save you time in learning and revising vocabulary,
and can help triage and augment the immersion process.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Layerability and Abstraction]]></title><description><![CDATA[Layerability and Networking An interesting aspect of Networking is how different protocols are layered. For example, to view this page, you…]]></description><link>https://cronokirby.github.io/posts/layerability/</link><guid isPermaLink="false">https://cronokirby.github.io/posts/layerability/</guid><pubDate>Sun, 27 Oct 2019 16:07:40 GMT</pubDate><content:encoded>&lt;h1&gt;Layerability and Networking&lt;/h1&gt;
&lt;p&gt;An interesting aspect of Networking is how different protocols are layered. For example, to view this page, you had to make
an HTTP request. That request was delivered using the TCP protocol, which in turn used the IP protocol, and finally the
underlying protocol to send data to your router (skimming a bit over details). Each of these layers only makes use of the one directly
beneath it: an implementation of an HTTP client worries about TCP, the TCP code in your OS deals with IP, etc.
This aspect is one of the best strengths of this layered model. I&apos;ll refer to this aspect as &lt;strong&gt;strict layering&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In order to make strict layering work, we need each layer to cover the needs of the layer above it. This is why some layers
have more than one protocol to choose from. For example, the application layer (HTTP et alii) can make use of either TCP or UDP.
UDP was introduced after TCP to fill some unfulfilled needs of some applications. TCP provides a reliable, ordered stream of data,
at the expense of more overhead, and (sometimes) higher latency. Some applications are willing to accept the possibility of data loss
in exchange for lower latency. For example, voice communication will rather play a snippet immediately, even if it&apos;s missing some audio,
rather than playing it later, but with complete audio. Because applications can use either TCP or UDP, depending on their constraints,
there&apos;s no urge for applications to dig further down in the networking stack. If applications sometimes needed to go underneath the transport layer abstraction,
for performance, or other reasons, then it&apos;d break the abstraction of strict layering.&lt;/p&gt;
&lt;p&gt;Strict layering is a stellar example of a tower of abstractions with little to no leaks. Each layer provides an interface as well
as guarantees to the layer above it. For example, TCP lets you send and receive bytes across a socket. Unlike a lower level protocol,
you can be sure that what you receive is in the right order, and isn&apos;t missing any data. Each of these layers fulfills a similar promise,
and we don&apos;t have to worry about the implementation details of everything below it.&lt;/p&gt;
&lt;p&gt;Of course, all networking layers have an escape hatch of sorts because of the possibility of network failure:
TCP sockets can be closed without warning, and HTTP requests can sometimes fail. This is something we accept and deal with
when working with networks. Well-implemented applications do, however, provide the illusion of an infallible network. Or at least,
they provide good awareness as to what&apos;s happening.&lt;/p&gt;
&lt;p&gt;Because each layer doesn&apos;t dig into the implementation below it, we can change the implementation while providing the same guarantees.
This allows us to improve the different layers without worrying about breaking anything. Furthermore, we can also have a higher level
protocol be adjusted to use a different underlying protocol. For example, we can switch our HTTP server for TCP to TLS in order
to have encryption. If every improvement to underlying layers required sweeping changes to all the applications above them,
those changes would simply never happen.&lt;/p&gt;
&lt;h1&gt;Layerability and Compilers&lt;/h1&gt;
&lt;p&gt;Another good example of layerability is in compilers with different targets.&lt;/p&gt;
&lt;p&gt;Let&apos;s take a hypothetical language, compiling to C. C in turn, is compiled down to some variant of assembly, e.g. x86-64.
This assembly language can be interpreted by different CPUs, even manufactured by different operators. There are quite
a few languages that compile to C, using this layering. C remains a popular compilation target for languages.&lt;/p&gt;
&lt;p&gt;The compiler writer for this language only needs to understand the behavior of C, and trust in the implementation of their
C compiler. The C compiler trusts that different CPUs faithfully implement the behavior of the assembly. CPU manufacturers
faithfully provide this assembly language interface.&lt;/p&gt;
&lt;p&gt;New languages can benefit from the existing C compilers and ecosystem, just by compiling down to C. Just as networked
applications can benefits from the work making TCP efficient, so can languages benefit from the efficiency of C compilers.&lt;/p&gt;
&lt;h2&gt;A more leaky tower&lt;/h2&gt;
&lt;p&gt;I think that the networking stack is a stellar example of a series of abstractions without leaks, but this tower is a bit more leaky.
With the advent of modern optimizing compilers, it&apos;s difficult to beat it in writing assembly. But, there are still situations
where we need to use certain intrinsic operations present in the assembly, but not in the C language. For example, to take advantage
of vectorization operations, we need to go down to assembly, because the language doesn&apos;t give us access to these operations
directly. Of course, we could use a library making use of these primitives, and compilers are getting better at including these intrinsics.
Smart optimizing compilers will be able to find potential places to use clever assembly operations, and insert them for you.&lt;/p&gt;
&lt;h1&gt;The key points&lt;/h1&gt;
&lt;p&gt;I think the key benefits of layerability can be summarized like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The layers are reusable between different applications.&lt;/li&gt;
&lt;li&gt;The layers can be swapped for different behaviors.&lt;/li&gt;
&lt;li&gt;The layers simplify the work of the application developer.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I think we should strive for layerable architecture inside our applications, and especially
inside of the protocols we develop. This kind of layering is perhaps the only sane way to build very durable software artifacts.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Poline]]></title><description><![CDATA[(Note: this is a first draft) This is a post about Poline, a tiny
programming language I wrote recently. The main "gimmick" of Poline is
a…]]></description><link>https://cronokirby.github.io/posts/poline/</link><guid isPermaLink="false">https://cronokirby.github.io/posts/poline/</guid><pubDate>Sat, 31 Aug 2019 23:18:13 GMT</pubDate><content:encoded>&lt;p&gt;&lt;em&gt;(Note: this is a first draft)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is a post about &lt;a href=&quot;https://github.com/cronokirby/poline&quot;&gt;Poline&lt;/a&gt;, a tiny
programming language I wrote recently. The main &quot;gimmick&quot; of Poline is
a feature called &lt;em&gt;Green Threads&lt;/em&gt;. In fact, Poline doesn&apos;t have many other
features besides them.&lt;/p&gt;
&lt;h1&gt;Green what?&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Green_threads&quot;&gt;Green Threads&lt;/a&gt; are a way of
managing concurrency. The core idea is to have many lightweight threads
scheduled over fewer OS threads. These tiny threads are then managed by
the runtime itself, instead of the OS.&lt;/p&gt;
&lt;h2&gt;Cooperative Scheduling&lt;/h2&gt;
&lt;p&gt;Languages like Go, as well as Poline, do cooperative scheduling for their
threads. The runtime knows when a given thread is performing a blocking
operation, and can &quot;preempt&quot; that thread in order to run others. For example,
when a thread is reading from a TCP socket, the runtime can switch off to other
threads if no data has arrived yet.&lt;/p&gt;
&lt;h2&gt;Messaging&lt;/h2&gt;
&lt;p&gt;Having independent threads is nice in and of itself, especially when combined
with preemption, but threads also want to communicate with eachother.&lt;/p&gt;
&lt;p&gt;In languages like Go, threads must communicate through explicit interfaces
called &lt;em&gt;channels&lt;/em&gt;. A channel first needs to be created and then given to
both threads before they can communicate to eachother across it. In Go,
multiple threads can be sending messages on a channel, and multiple threads
can be pulling messages from that channel.&lt;/p&gt;
&lt;p&gt;Other languages, such as Erlang and Poline itself, instead allow communication
between threads directly. In Poline, creating a new thread also gives us a
handle, which we can use to send messages to that thread. The thread itself can
wait until it receives messages sent directly to it.&lt;/p&gt;
&lt;h2&gt;Motivation&lt;/h2&gt;
&lt;p&gt;My main motivation in writing Poline was to learn how to implement Green
Threading. The impetus was actually a tweet, describing Green Threading as a good interview question.
I wondered how I might implement that feature myself, and decided to tinker with
tiny language. Poline doesn&apos;t have many features specifically because I wanted
to focus on this aspect.&lt;/p&gt;
&lt;h1&gt;The language itself&lt;/h1&gt;
&lt;p&gt;Before I go into the implementation of Poline, let&apos;s take a look at its syntax.&lt;/p&gt;
&lt;p&gt;A Poline program consists of a series of function declarations.
Here&apos;s an example of one of these declarations:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;fn example(arg1, arg2) {
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Each function has a name, and then takes a list of named arguments.&lt;/p&gt;
&lt;p&gt;The function called &lt;code class=&quot;language-text&quot;&gt;main&lt;/code&gt;, is the entry point for a program.&lt;/p&gt;
&lt;h2&gt;String litterals&lt;/h2&gt;
&lt;p&gt;The only type of litteral in Poline is the string, which works
the same as other languages:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;quot;example string&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The only things a variable can contain in Poline are strings, and thread
handles, as we&apos;ll see later.&lt;/p&gt;
&lt;h2&gt;Printing&lt;/h2&gt;
&lt;p&gt;Poline has a statement for printing:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;fn example(arg) {
    print arg;
    print &amp;quot;litteral&amp;quot;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Both variables, and string litterals can be printed. Every statement
in poline ends with a semicolon. Every function consists of a series
of statements.&lt;/p&gt;
&lt;h2&gt;Calling functions&lt;/h2&gt;
&lt;p&gt;Another type of statement is the function call:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;fn print(arg) {
    print arg;
}

fn main() {
    print(&amp;quot;foo&amp;quot;);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This works as you&apos;d expect. Extra arguments are ignored, and missing arguments
are filled in with empty strings.&lt;/p&gt;
&lt;h2&gt;Creating threads&lt;/h2&gt;
&lt;p&gt;Now we come to the real interesting parts of Poline.&lt;/p&gt;
&lt;p&gt;We can create a new thread from a function call:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;fn print(arg) {
    print arg;
}

fn main() {
    spawn print(&amp;quot;a&amp;quot;) as p;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, the variable &lt;code class=&quot;language-text&quot;&gt;p&lt;/code&gt; contains the handle for the thread we&apos;ve spawned.
The thread will run the function it was called with.&lt;/p&gt;
&lt;h2&gt;Communicating between threads&lt;/h2&gt;
&lt;p&gt;Here&apos;s an example program that shows how messaging works:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;fn print_recv() {
    recv arg;
    print arg;
}

fn main() {
    spawn print_recv() as p;
    send &amp;quot;foo&amp;quot; to p;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After spawning a new thread, we have a handle we can access stored in &lt;code class=&quot;language-text&quot;&gt;p&lt;/code&gt;.
We send the string litteral &lt;code class=&quot;language-text&quot;&gt;&amp;quot;foo&amp;quot;&lt;/code&gt; to &lt;code class=&quot;language-text&quot;&gt;p&lt;/code&gt;. We could have sent a variable
instead of a string litteral too.&lt;/p&gt;
&lt;p&gt;In the thread &lt;code class=&quot;language-text&quot;&gt;p&lt;/code&gt;, we first receive a message, creating a variable named
&lt;code class=&quot;language-text&quot;&gt;arg&lt;/code&gt;, and then we print the contents of that variable.&lt;/p&gt;
&lt;h3&gt;Preemption&lt;/h3&gt;
&lt;p&gt;We&apos;ll go into the details of this later, but whenever a thread uses &lt;code class=&quot;language-text&quot;&gt;recv&lt;/code&gt;,
it gets preempted until a message is available. When &lt;code class=&quot;language-text&quot;&gt;p&lt;/code&gt; calls &lt;code class=&quot;language-text&quot;&gt;recv&lt;/code&gt; without
a message to fulfill that request, it gets preempted, letting another
thread run. Once a message is sent to &lt;code class=&quot;language-text&quot;&gt;p&lt;/code&gt;, it can be considered again.&lt;/p&gt;
&lt;p&gt;Poline is actually deterministic, because it doesn&apos;t yet have multithreading.
In this case, &lt;code class=&quot;language-text&quot;&gt;p&lt;/code&gt; will always start running after the main thread finishes,
because the main thread has no blocking &lt;code class=&quot;language-text&quot;&gt;recv&lt;/code&gt; calls that preempt it off.&lt;/p&gt;
&lt;h1&gt;Implementation&lt;/h1&gt;
&lt;p&gt;I decided to implement Poline in &lt;em&gt;Rust&lt;/em&gt;, mainly because I&apos;m familiar with
the language, and because it has good ways of representing ASTs.&lt;/p&gt;
&lt;p&gt;The interpretation pipeline looks like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Lexing -&amp;gt; Parsing -&amp;gt; Simplifying -&amp;gt; Interpreting&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The lexing phase separates the raw text into tokens,
making it easier to parser. The parser converts this newly created
series of tokens into an AST representing the program. The simplifier
makes the code easier for the interpreter, by doing things like removing
variable names. And the interpreter is the work horse here, actually
executing the code.&lt;/p&gt;
&lt;p&gt;I&apos;ve taken some care in making the code easier to understand, so I encourage
you to check out the &lt;a href=&quot;https://github.com/cronokirby/poline&quot;&gt;source&lt;/a&gt;
itself for more details about the implementation.&lt;/p&gt;
&lt;h2&gt;Lexing&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/cronokirby/poline/blob/master/src/parser.rs#L62&quot;&gt;lexer&lt;/a&gt;
takes the raw text of the program, and converts that into
a series of tokens.&lt;/p&gt;
&lt;p&gt;For example, this program:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;fn main() {
    print &amp;quot;foo&amp;quot;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;gets lexed into:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Function Name(&amp;quot;main&amp;quot;) ( ) { Print String(&amp;quot;foo&amp;quot;) ; }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dealing with a sequence of tokens instead of raw text makes the parser&apos;s job much easier.&lt;/p&gt;
&lt;p&gt;The language is simple enough that the lexer can work with just one character of lookahead.
Essentially, our lexer only needs the following operations from our source of
text:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// pseudo code
fn next(Source) -&amp;gt; Option&amp;lt;char&amp;gt;
fn peek(Source) -&amp;gt; Option&amp;lt;char&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first function, &lt;code class=&quot;language-text&quot;&gt;next&lt;/code&gt;, will return &lt;code class=&quot;language-text&quot;&gt;None&lt;/code&gt; if we&apos;re at the end of our
source, and will otherwise return the next available character, and then advance
that source. For example, given &lt;code class=&quot;language-text&quot;&gt;&amp;quot;12&amp;quot;&lt;/code&gt; as our source, the first call to next
will return &lt;code class=&quot;language-text&quot;&gt;Some(&amp;#39;1&amp;#39;)&lt;/code&gt;, the next will return &lt;code class=&quot;language-text&quot;&gt;Some(&amp;#39;2&amp;#39;)&lt;/code&gt;, and subsequent calls
will return &lt;code class=&quot;language-text&quot;&gt;None&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The difference between &lt;code class=&quot;language-text&quot;&gt;peek&lt;/code&gt;, and &lt;code class=&quot;language-text&quot;&gt;next&lt;/code&gt; is that the former doesn&apos;t advance the
source. Given &lt;code class=&quot;language-text&quot;&gt;&amp;quot;12&amp;quot;&lt;/code&gt; as our input, calls to &lt;code class=&quot;language-text&quot;&gt;peek&lt;/code&gt; will always return &lt;code class=&quot;language-text&quot;&gt;Some(1)&lt;/code&gt;,
until we call &lt;code class=&quot;language-text&quot;&gt;next&lt;/code&gt; to move the input forward.&lt;/p&gt;
&lt;p&gt;The lexer works by repeatedly calling &lt;code class=&quot;language-text&quot;&gt;next&lt;/code&gt;, and then emitting tokens based on
what it says. The one situation where &lt;code class=&quot;language-text&quot;&gt;peek&lt;/code&gt; is needed is parsing names.
The lexer keeps interpreting the characters as part of the name until a
non-alpha-numeric character is reached with &lt;code class=&quot;language-text&quot;&gt;peek&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To handle keywords, the lexer first lexes out a name, and then checks if
that name corresponds to one of the built-in keywords. This lets &lt;code class=&quot;language-text&quot;&gt;printer&lt;/code&gt;
lex as &lt;code class=&quot;language-text&quot;&gt;Name(&amp;quot;printer&amp;quot;)&lt;/code&gt; and not &lt;code class=&quot;language-text&quot;&gt;print Name(&amp;quot;er&amp;quot;)&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Parsing&lt;/h2&gt;
&lt;p&gt;The
&lt;a href=&quot;https://github.com/cronokirby/poline/blob/master/src/parser.rs#L219&quot;&gt;parser&lt;/a&gt;
takes the series of tokens produced by the previous stage, and converts them
into a single representation of the program as a &lt;a href=&quot;https://github.com/cronokirby/poline/blob/master/src/parser.rs#L192&quot;&gt;syntax tree&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For example, the following program:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;fn main() {
    print &amp;quot;main&amp;quot;;
    spawn main() as p;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Produces the following tree:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// Slightly simplified rust
Syntax {
    functions: [
        FunctionDeclaration {
            name: &amp;quot;main&amp;quot;,
            arg_names: [],
            body: [
                Statement::Print(Argument::Str(&amp;quot;main&amp;quot;))
                Statement::Spawn(&amp;quot;p&amp;quot;, FunctionCall {
                    name: &amp;quot;main&amp;quot;,
                    args: []
                })
            ]
        }
    ]
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This tree represents the program as presented by the user. The parsing stage
excludes programs that make no syntactic sense, e.g.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;fn main() main() {
    print print ; ; &amp;quot;foo&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But it can&apos;t do anything for programs that work syntactically, but not logically.&lt;/p&gt;
&lt;p&gt;The parser is written as a hand-crafted
&lt;a href=&quot;https://en.wikipedia.org/wiki/Recursive_descent_parser&quot;&gt;recursive descent
parser&lt;/a&gt;,
but going into how those work is a bit outside the scope of this post.&lt;/p&gt;
&lt;h1&gt;Simplification&lt;/h1&gt;
&lt;p&gt;To illustrate what
&lt;a href=&quot;https://github.com/cronokirby/poline/blob/master/src/simplifier.rs#L355&quot;&gt;simplification&lt;/a&gt;
does, let&apos;s take the example program from previously:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;fn main() {
    print &amp;quot;main&amp;quot;;
    spawn main() as p;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This simplifies into:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Program {
    strings: [&amp;quot;main&amp;quot;],
    main_function: 0,
    functions: [FunctionDeclaration {
       arg_count: 0,
       body: [
          Statement::Print(Argument::Str(0)),
          Statement::Spawn(FunctionCall {
              name: 0,
              args: []
          })
       ]
    }]
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first thing to notice is the extra information in addition to the syntax
tree. We&apos;ve moved all of the string litterals in our program into an external
table, and we have an index for the main function. The main work done by
simplification is to remove litteral strings and names from our syntax tree.
Instead of referring to functions by their name, we refer to them by their
index. We now refer to string litterals in the AST by their position in the table.
Variables are referred to by their position on their stack.&lt;/p&gt;
&lt;h2&gt;Stack indices&lt;/h2&gt;
&lt;p&gt;For variables, we refer to them by stack position. For example:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;fn foo(x, y) {
    print x;
    print y;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;will simplify into:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;FunctionDeclaration {
    arg_count: 2,
    body: [
        Statement::Print(Argument::Name(0)),
        Statement::Print(Argument::Name(1))
    ]
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Instead of printing &lt;code class=&quot;language-text&quot;&gt;x&lt;/code&gt;, we now print &lt;code class=&quot;language-text&quot;&gt;0&lt;/code&gt;, since we&apos;re printing the variable
with index &lt;code class=&quot;language-text&quot;&gt;0&lt;/code&gt; on the stack. We&apos;ll use a stack to contain the contents of our
variables, so all the interpreter needs to do is lookup that position on the stack.&lt;/p&gt;
&lt;h2&gt;Shadowing&lt;/h2&gt;
&lt;p&gt;You might have noticed previously that our spawn statement now takes a single argument
instead of two. This is because we refer to variables by their index on the
stack instead of their name. But spawn always introduces a new variable, even if
the name shadows an existing one. Because of this, there&apos;s no point having that
second argument, since we always know that spawn pushes to the end of the stack.&lt;/p&gt;
&lt;h1&gt;Interpreter&lt;/h1&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/cronokirby/poline/blob/master/src/interpreter.rs#L387&quot;&gt;interpreter&lt;/a&gt;
takes the AST produced in the previous steps, and actually runs the code
contained inside.&lt;/p&gt;
&lt;h2&gt;Testing&lt;/h2&gt;
&lt;p&gt;The main way I tested the interpreter was by comparing expected print outputs to
what the interpreter actually spit out. In order to test these outputs without
looking at a terminal, I used a trait for the effects the interpreter needed:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;pub trait ProgramIO {
    fn print(&amp;amp;mut self, message: &amp;amp;str);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Instead of printing out directly, the interpreter would instead call this
method. When testing, we pass an implementation of this trait that appends
printed messages to a vector. We can inspect this in order to test the interpeter.&lt;/p&gt;
&lt;h2&gt;State&lt;/h2&gt;
&lt;p&gt;The state the interpreter maintains looks something like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;current_thread
threads [
    mailbox
    calls [
        function
        statement_index
        stack
    ]
]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Each thread has a mailbox to contain the messages it receives. The &lt;code class=&quot;language-text&quot;&gt;send&lt;/code&gt;
statement results in a new variable being pushed there.&lt;/p&gt;
&lt;p&gt;We also have a sequence of function calls. Everytime a thread calls a function,
it pushes some new state to the end of these calls. Whenever we reach the end of
a function, we pop that state of from our stack of calls. We also have a stack
containing the variables used in a function. We make sure to keep track of the
function we&apos;re executing, along with the index of the statement we&apos;re at in that
function, so that we can resume execution after preempting this thread.&lt;/p&gt;
&lt;h2&gt;Structure&lt;/h2&gt;
&lt;p&gt;The way the interpeter works is by finding the next statement to execute,
and then changing the state around it based on that statement.&lt;/p&gt;
&lt;p&gt;We first look for a statement in the current thread. If a thread becomes
blocked, then the subsequent thread becomes the current thread. If a thread
finishes executing, then we mark that thread&apos;s slot as dead, so that we can
reuse that space.&lt;/p&gt;
&lt;p&gt;All the magic of green threading happens in this statement searching and current
thread switching.&lt;/p&gt;
&lt;h1&gt;Further Reading&lt;/h1&gt;
&lt;p&gt;This was a high level overview of how the interpreter for poline works. If you
want a more detailed look, I&apos;d recommend looking at the
&lt;a href=&quot;https://github.com/cronokirby/poline/&quot;&gt;source code&lt;/a&gt; itself.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[From Interfaces to Traits]]></title><description><![CDATA[This is a post about how different languages
handle the concept of interfaces. We'll go over the classical
OO way of handling them, with…]]></description><link>https://cronokirby.github.io/posts/Interfaces-to-Traits/</link><guid isPermaLink="false">https://cronokirby.github.io/posts/Interfaces-to-Traits/</guid><pubDate>Sat, 17 Aug 2019 12:32:00 GMT</pubDate><content:encoded>&lt;p&gt;This is a post about how different languages
handle the concept of &lt;em&gt;interfaces&lt;/em&gt;. We&apos;ll go over the classical
&lt;em&gt;OO&lt;/em&gt; way of handling them, with &lt;em&gt;Java&lt;/em&gt;, to the more recent
approaches of languages like &lt;em&gt;Rust&lt;/em&gt;, as well as others in between.&lt;/p&gt;
&lt;h1&gt;Why do we want interfaces?&lt;/h1&gt;
&lt;p&gt;The problem interfaces address is &lt;em&gt;polymorphism&lt;/em&gt;.
Polymorphic code can work with different types of things
in a flexible way. In practice this means functions
that can accept different types, and work differently based on those
types.&lt;/p&gt;
&lt;p&gt;For example, we might have a function that can print out results
to a file or directly to the terminal.&lt;/p&gt;
&lt;p&gt;Polymorphism lets us write more reusable code. One function
can operate on many types without having to be rewritten for each of them.&lt;/p&gt;
&lt;p&gt;Functions that use only an interface, instead of all the implementation
details of a type, are easier to understand. For example, instead of
depending on all of a file&apos;s operations, we only care about using it as another
output stream. This allows our functions to worry
about less things, and get closer to having a &lt;em&gt;single responsibility&lt;/em&gt;.&lt;/p&gt;
&lt;h1&gt;Classical Interfaces&lt;/h1&gt;
&lt;p&gt;Interfaces in Java are a variant of &lt;em&gt;inheritance&lt;/em&gt;, so
let&apos;s look over how that works first.&lt;/p&gt;
&lt;h2&gt;Inheritance&lt;/h2&gt;
&lt;p&gt;Java has &lt;em&gt;classes&lt;/em&gt;, and these have &lt;em&gt;methods&lt;/em&gt;.
For example:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Rectangle&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; height&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; width&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Rectangle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;height&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; width&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;height &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; height&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;width &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; width&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; height &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; width&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a class, with two &lt;em&gt;fields&lt;/em&gt;, a &lt;em&gt;constructor&lt;/em&gt;, and a method
that makes use of both of those fields.&lt;/p&gt;
&lt;p&gt;We can create a new &lt;em&gt;instance&lt;/em&gt; of this class, and call its methods
as follows:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; rectangle &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Rectangle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rectangle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This program prints out &lt;code class=&quot;language-text&quot;&gt;12&lt;/code&gt;, because we call this rectangle&apos;s methods using
the data contained in its fields.&lt;/p&gt;
&lt;p&gt;We can also make new classes which inherit from another;
for example:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Square&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Rectangle&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Square&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;width&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;width&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; width&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This class can be used like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; square &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Square&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;square&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This program prints out &lt;code class=&quot;language-text&quot;&gt;9&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;Square&lt;/code&gt; class inherits all the methods and their implementations
from its parent class &lt;code class=&quot;language-text&quot;&gt;Rectangle&lt;/code&gt;, and can use its parent&apos;s constructor.
This means that it already has all of &lt;code class=&quot;language-text&quot;&gt;Rectangle&lt;/code&gt;&apos;s methods and their
implementations from the start.&lt;/p&gt;
&lt;p&gt;Classes can also change the implementation of certain methods. This
is called &lt;em&gt;overriding&lt;/em&gt; in Java.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;  &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// new behavior&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Abstract Classes&lt;/h2&gt;
&lt;p&gt;Java also has a feature called &lt;em&gt;abstract classes&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Abstract classes have one big difference from normal classes:
they can choose not to provide an implementation for a given method.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Shape&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;heightSquared&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; h &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; h &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; h&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We&apos;ve left the &lt;code class=&quot;language-text&quot;&gt;height&lt;/code&gt; method abstract. We can&apos;t actually create
instances of the &lt;code class=&quot;language-text&quot;&gt;Shape&lt;/code&gt; class. Instead, we need to extend the class
with another, and then we can create instances of that &lt;em&gt;subclass&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Interfaces&lt;/h2&gt;
&lt;p&gt;Now that we&apos;ve seen classes, and then abstract classes, we
can move on to interfaces, as implemented in Java.&lt;/p&gt;
&lt;p&gt;An interface is essentially an abstract class, where
all the methods are abstract.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ShapeLike&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can then have different classes that implement this interface:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Rectangle&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ShapeLike&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; width &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; height&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Square&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ShapeLike&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; width &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; width&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This can be used for polymorphism, by declaring a function that accepts
an interface instead of a specific type:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ShapeUtils&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;areaSquared&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ShapeLike&lt;/span&gt; shape&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; shape&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(We make a class with a &lt;em&gt;static&lt;/em&gt; method because Java doesn&apos;t like free functions).&lt;/p&gt;
&lt;p&gt;One key thing to notice here is that each class has to explicitly
declare that it implements a given interface. There&apos;s no way to make
an old class implement a new interface.&lt;/p&gt;
&lt;p&gt;Java has many other ways of implementing polymorphism through
inheritence, from subclassing to abstract classes to interfaces.
All of these have allow a function to accept a given
type without knowing whether that argument is of that exact type,
or a given subtype. When accepting an interface, a function can only use
the methods that interface provides, and is oblivious to the other details the
various classes implementing that interface may have.&lt;/p&gt;
&lt;h1&gt;Middle Ground: Go&lt;/h1&gt;
&lt;p&gt;The main difference between &lt;em&gt;Go&lt;/em&gt; and Java is that in Go, implementing
an interface is implicit, whereas in Java, this is explicit.&lt;/p&gt;
&lt;p&gt;Continuing with our geometry examples, in Go we might have code
that looks like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;go&quot;&gt;&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;package&lt;/span&gt; main

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; Shape &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; Square &lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  width &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s Square&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;width &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;width
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; s Shape
  s &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Square&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;width&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  fmt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(This is actually a complete Go program that can be run, and prints out &lt;code class=&quot;language-text&quot;&gt;9&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;The first part of this program declares a new interface type, named &lt;code class=&quot;language-text&quot;&gt;Shape&lt;/code&gt;.
This interface is defined by the method &lt;code class=&quot;language-text&quot;&gt;area&lt;/code&gt;. With the way interfaces
work in Go, any type that has a method named &lt;code class=&quot;language-text&quot;&gt;area&lt;/code&gt; with the right type signature
can be used as that interface. Later on in the program, we assign a value
of type &lt;code class=&quot;language-text&quot;&gt;Square&lt;/code&gt; to a variable of type &lt;code class=&quot;language-text&quot;&gt;Shape&lt;/code&gt;. This is allowed because
&lt;code class=&quot;language-text&quot;&gt;Square&lt;/code&gt; has a method with the right name and types.&lt;/p&gt;
&lt;p&gt;One downside of Java&apos;s interfaces is that old types cannot implement
new interfaces. If we notice a behavior we want to abstract over,
we can&apos;t make it work with existing types. Because Go has implicit interfaces,
if we notice that multiple types already have a given method, we can abstract
over that. We can create a function that accepts any type that has a given set
of methods by using interfaces.&lt;/p&gt;
&lt;h1&gt;Rust&apos;s Traits&lt;/h1&gt;
&lt;p&gt;Rust&apos;s version of interfaces is called &lt;em&gt;traits&lt;/em&gt;. These
traits function quite similarly to &lt;em&gt;Haskell&lt;/em&gt;&apos;s &lt;em&gt;typeclasses&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The main difference between Rust and the other two examples
we&apos;ve seen so far is that in Rust, traits are implemented
explicitly, but can be implemented for existing types.&lt;/p&gt;
&lt;p&gt;Let&apos;s look at an example:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;rust&quot;&gt;&lt;pre class=&quot;language-rust&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;trait&lt;/span&gt; Shape &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&gt;&lt;/span&gt; i32&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; Square &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  width&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; i32
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;impl&lt;/span&gt; Shape &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; Square &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&gt;&lt;/span&gt; i32 &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
     width &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; width
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We&apos;ve seen a similar example a few times. This is very similar
to the Go version, except that instead of implementing
an &lt;code class=&quot;language-text&quot;&gt;area&lt;/code&gt; method in the struct (which we can do in Rust), and
then having the interface implementation be implicit, we have
to explicitly implement that interface.&lt;/p&gt;
&lt;p&gt;One advantage of explicit implementation is that the Rust
compiler can warn us if we incorrectly implement an interface.
In Java a similar thing happens as well.&lt;/p&gt;
&lt;p&gt;Because the implementation block is separate from the declaration
of the type itself, we can implement a trait for a type that already
exists. This is very useful, because we can identify abstractions at any time.&lt;/p&gt;
&lt;p&gt;There are two &quot;guidelines&quot; of sorts that constrain this a little bit.
We should try and put a trait implementation either&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In the same file as the declaration of a &lt;em&gt;trait&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;In the same file as the declaration of a &lt;em&gt;type&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For existing types, we have to put the implementation next
to the trait, since we don&apos;t have access to the original file.&lt;/p&gt;
&lt;p&gt;For types we think up after having created the interface, we can
implement that interface next to the type.&lt;/p&gt;
&lt;h1&gt;Interface Matrix&lt;/h1&gt;
&lt;p&gt;We can divide up the design space we&apos;ve gone over so far like so:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Language&lt;/th&gt;
&lt;th&gt;Existing Types&lt;/th&gt;
&lt;th&gt;Explicit&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Java&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Go&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Rust&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;I don&apos;t know of a language with some kind of interface construct
which doesn&apos;t work with existing types, but has implicit implementation.
I think that this may not even be possible. If the implementation is
implicit, then it will pick up the methods that already
exist for certain types.&lt;/p&gt;
&lt;h1&gt;My Opinions&lt;/h1&gt;
&lt;p&gt;Now we come to the meat of the post: why I think Rust&apos;s position
in the design space is the best.&lt;/p&gt;
&lt;h3&gt;Traits work with existing types&lt;/h3&gt;
&lt;p&gt;This is the most important aspect of traits in my view.&lt;/p&gt;
&lt;p&gt;By being able to implement new traits for old types,
you can discover and work on abstractions independently
of other types. This allows you to work much more flexibly
with other people&apos;s code, since you can implement
your own abstraction layer without having to write a
bunch of wrapper types.&lt;/p&gt;
&lt;h3&gt;Traits are still explicit&lt;/h3&gt;
&lt;p&gt;In general, I prefer explicit behavior to implicit
behavior.&lt;/p&gt;
&lt;p&gt;One advantage of trait implementations being explicit
is that it&apos;s easy to tell that a type implements a trait
correctly. In Rust, if your implementation uses the wrong
name or method type, then you&apos;ll catch it then and there.
In Go, you&apos;ll only catch this once you try and assign
this type to a given interface.&lt;/p&gt;
&lt;p&gt;The two guidelines for where trait implementations
should lie keeps things much more orderly. It&apos;s very easy
to know what existing types a trait decided to provide
implementations for, since they all have to be located
next to the trait itself.&lt;/p&gt;
&lt;h1&gt;Summary&lt;/h1&gt;
&lt;p&gt;Different languages have different ways of implementing
interface-like concepts. The main axes in the design space
are explicit vs implicit implementation, and working
with existing types or not.&lt;/p&gt;
&lt;p&gt;Rust&apos;s position of working with existing types in an explicit
way is the best, in my opinion.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Poline]]></title><description><![CDATA[Poline is a little programming language I wrote to learn
about implementing Green Threading. The language
doesn't feature much more than…]]></description><link>https://cronokirby.github.io/projects/poline/</link><guid isPermaLink="false">https://cronokirby.github.io/projects/poline/</guid><pubDate>Fri, 16 Aug 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;strong&gt;Poline&lt;/strong&gt; is a little programming language I wrote to learn
about implementing Green Threading. The language
doesn&apos;t feature much more than string litterals, and mechanisms
for spawning threads and communicating between them.&lt;/p&gt;
&lt;p&gt;Green Threads allow many logical threads in a program to
execute on a limited number of actual OS threads. They
can be preempted off if they invoke a blocking operation.&lt;/p&gt;
&lt;!--more--&gt;</content:encoded></item><item><title><![CDATA[Sentence Banking]]></title><description><![CDATA[This is a post about ginkou, a tool I
made recently. This tool uses Rust, SQLite, as well as
mecab to archive sentences, and then to…]]></description><link>https://cronokirby.github.io/posts/sentence-banking/</link><guid isPermaLink="false">https://cronokirby.github.io/posts/sentence-banking/</guid><pubDate>Sun, 07 Jul 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This is a post about &lt;a href=&quot;https://github.com/cronokirby/ginkou&quot;&gt;ginkou&lt;/a&gt;, a tool I
made recently. This tool uses Rust, SQLite, as well as
&lt;a href=&quot;http://taku910.github.io/mecab/&quot;&gt;mecab&lt;/a&gt; to archive sentences, and then to
retrieve them based on the words they contain.&lt;/p&gt;
&lt;h1&gt;Why would I need this?&lt;/h1&gt;
&lt;p&gt;Unless you&apos;re learning Japanese, you probably won&apos;t.&lt;/p&gt;
&lt;p&gt;With the way I&apos;m approaching it, I try and combine words and grammar into the
same flashcard system. This means making new flashcarsd with sentences
containing small bits of information I&apos;m trying to learn. These can be new words
of grammar. By keeping information in full sentences, everything is learned in context.&lt;/p&gt;
&lt;p&gt;A new words is sometimes encountered without an accompanying sentence, or in a
sentence that contain too many unknown parts. We want a sentence where just that
word is new, so we&apos;d like to easily find sentences containing that word.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ginkou&lt;/strong&gt; makes finding these examples sentences easy. The program is used to
first build up a bank of sentences, and then to retrieve sentences from that
bank based on the words they contain.&lt;/p&gt;
&lt;h1&gt;Bird&apos;s eye view&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Ginkou&lt;/strong&gt; has two main operations: &lt;strong&gt;add&lt;/strong&gt; and &lt;strong&gt;get&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;add&lt;/strong&gt; operation takes text, either from a file, or from the command line,
and then adds those to the bank. This operation will first parse the input into
sentences. Then it splits each sentence into a list of words, using &lt;strong&gt;mecab&lt;/strong&gt;.
Using &lt;strong&gt;mecab&lt;/strong&gt; instead of naive splitting lets us use the root from for
conjugated verbs. Naively splitting would use the form the verb happens to be
conjugated in.&lt;/p&gt;
&lt;p&gt;We then store the sentence in one table, and each word in that sentence in
another. We then add a link in a junction table for each word. Each link
specifies that a word &lt;code class=&quot;language-text&quot;&gt;W&lt;/code&gt; appears in a sentence &lt;code class=&quot;language-text&quot;&gt;S&lt;/code&gt;. This table is used to
represent the &lt;em&gt;many-to-many&lt;/em&gt; relationship between words and sentences.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;get&lt;/strong&gt; operation looks up the sentences containing a given word. This
operation uses the junction table built up with the &lt;strong&gt;add&lt;/strong&gt; operation.
Implementing this operation requires a bit of &lt;em&gt;SQL&lt;/em&gt; statement savvy, which we&apos;ll explore later in
this post.&lt;/p&gt;
&lt;h1&gt;Why Rust?&lt;/h1&gt;
&lt;p&gt;I like using &lt;em&gt;Rust&lt;/em&gt; for small command line tools. It has a bit of a learning
curve, but is easy to use after that. The tools tend to work efficiently without
having to pine much over performance. &lt;em&gt;Rust&lt;/em&gt; also has good libraries for parsing
command line arguments, and for using &lt;em&gt;SQLite&lt;/em&gt;.&lt;/p&gt;
&lt;h1&gt;Why SQLite?&lt;/h1&gt;
&lt;p&gt;One advantage of using SQLite was the ability to transfer the bank between
computers easily. Since SQLite keeps a database in a single file,
we can simply transfer the file from one place to another.&lt;/p&gt;
&lt;p&gt;Integrating SQLite is also much easier in a standalone application,
as we don’t need to worry about starting the database in the background.
All we need to do is have a file for SQLite to work with.&lt;/p&gt;
&lt;h1&gt;Table Structure&lt;/h1&gt;
&lt;p&gt;In this section we&apos;ll go over what our database schema looks like.&lt;/p&gt;
&lt;p&gt;We have a table for each word, and a table for each sentence:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;TABLE&lt;/span&gt; Words&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    id &lt;span class=&quot;token keyword&quot;&gt;INTEGER&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    word &lt;span class=&quot;token keyword&quot;&gt;TEXT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;UNIQUE&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;TABLE&lt;/span&gt; Sentences&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    id &lt;span class=&quot;token keyword&quot;&gt;INTEGER&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    sentence &lt;span class=&quot;token keyword&quot;&gt;TEXT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Each table uses an integer as its primary key. Both tables then store text in
the other column. We don&apos;t want to avoid storing duplicate words, so we add a
&lt;code class=&quot;language-text&quot;&gt;UNIQUE&lt;/code&gt; constraint to that column. To avoid errors, we need to make sure to
only insert new words into the table.&lt;/p&gt;
&lt;p&gt;Next we have the junction table modelling the &lt;em&gt;many-to-many&lt;/em&gt; relationship:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;TABLE&lt;/span&gt; WordSentence&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    word_id &lt;span class=&quot;token keyword&quot;&gt;INTEGER&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    sentence_id &lt;span class=&quot;token keyword&quot;&gt;INTEGER&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;word_id&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sentence_id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;FOREIGN&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;word_id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;REFERENCES&lt;/span&gt; Words&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;FOREIGN&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sentence_id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;REFERENCES&lt;/span&gt; Sentences&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This table only contains 2 columns, one referencing words, and the other
referencing sentences. The rest of the schema makes sure that the keys inserted
into the table come in unique pairs, and that they reference keys that exist in
the other tables.&lt;/p&gt;
&lt;h2&gt;Example usage&lt;/h2&gt;
&lt;p&gt;To illustrate how this table works, let&apos;s look at an example sentence. The
sentence &quot;猫を見た&quot; contains the following words: 猫, を, and 見る. (見た is the
past tense of 見る). Adding this sentence to an empty database will give us the
following tables:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Words&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;id word
&lt;span class=&quot;token comment&quot;&gt;-- ----&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;  猫
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;  を
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;  見る&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Sentences&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;id sentence
&lt;span class=&quot;token comment&quot;&gt;-- --------&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;  猫を見た&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;WordSentence&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;word_id sentence_id
&lt;span class=&quot;token comment&quot;&gt;------- -----------&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;       &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;       &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;       &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For each word, we&apos;ve created a link in the junction table representing the word
belonging to the first sentence in our newly populated sentence table.&lt;/p&gt;
&lt;h2&gt;Big Scary Statements&lt;/h2&gt;
&lt;p&gt;The trickiest statement to write was for the &lt;code class=&quot;language-text&quot;&gt;get&lt;/code&gt; operation.
This statement needs to look up all the sentences containing a specific word.
To do this we make use of the Junction table we previously populated,
joining our sentences with the words they contain.
Once we have a table of rows with a sentence and a word,
we can filter for rows containing the right word, and take out the sentence.&lt;/p&gt;
&lt;p&gt;The statement looks like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; sentence &lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; sentences
&lt;span class=&quot;token keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;JOIN&lt;/span&gt; wordsentence &lt;span class=&quot;token keyword&quot;&gt;ON&lt;/span&gt; wordsentence&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sentence_id &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; sentences&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id
&lt;span class=&quot;token keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;JOIN&lt;/span&gt; words &lt;span class=&quot;token keyword&quot;&gt;ON&lt;/span&gt; words&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; wordsentence&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;word_id
&lt;span class=&quot;token keyword&quot;&gt;WHERE&lt;/span&gt; word&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;?&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I think we could have used an &lt;em&gt;Inner Join&lt;/em&gt; as well,
but since we’re checking with equality on a word,
the &lt;code class=&quot;language-text&quot;&gt;NULL&lt;/code&gt;s that appear because of a &lt;em&gt;Left Join&lt;/em&gt; don’t matter.&lt;/p&gt;
&lt;h1&gt;Disks are slow&lt;/h1&gt;
&lt;p&gt;On the first iteration of the program, consuming sentences was very slow:
the program was only capable of adding 3 sentences per second or so.
The culprit turned out to be how SQLite was used.&lt;/p&gt;
&lt;p&gt;When SQLite was used with an in memory database instead of an on-disk one,
the processing rate went up to 1000 sentences per second.
Every time we added a sentence, we had to process a few SQL statements on the
database. With an on file database, this meant hitting the disk for every sentence, which was quite slow.&lt;/p&gt;
&lt;p&gt;In order to take advantage of the speed of in memory transactions,
while still having a final database on disk, I used SQLite’s transactions,
which allow us to perform a bunch of operations in memory,
before finally committing them to the real database on disk.&lt;/p&gt;
&lt;h1&gt;Final Remarks&lt;/h1&gt;
&lt;p&gt;This post was just to share a few thoughts and snippets of what went into this
little project. Hopefully there was something to learn from it.
The curious can check out the code over &lt;a href=&quot;https://github.com/cronokirby/ginkou&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Ginkou]]></title><description><![CDATA[Ginkou is a program to build up a corpus of searchable sentences.
Ginkou can consume Japanese sentences from the command line, or from a…]]></description><link>https://cronokirby.github.io/projects/ginkou/</link><guid isPermaLink="false">https://cronokirby.github.io/projects/ginkou/</guid><pubDate>Fri, 28 Jun 2019 18:55:57 GMT</pubDate><content:encoded>&lt;p&gt;&lt;strong&gt;Ginkou&lt;/strong&gt; is a program to build up a corpus of searchable sentences.
&lt;strong&gt;Ginkou&lt;/strong&gt; can consume Japanese sentences from the command line, or from a text
file, parse those sentences into words, and then index those sentences for
easy retrieval. Given a word, &lt;strong&gt;Ginkou&lt;/strong&gt; can look up sentences containing
that word, even if it&apos;s in a different form, such as a conjugated verb.&lt;/p&gt;
&lt;!--more--&gt;</content:encoded></item><item><title><![CDATA[Data Races vs Race Conditions]]></title><description><![CDATA[This is a quick post about the difference between  and
, and how data structures or patterns providing freedom
from data races can fail to…]]></description><link>https://cronokirby.github.io/posts/data-races-vs-race-conditions/</link><guid isPermaLink="false">https://cronokirby.github.io/posts/data-races-vs-race-conditions/</guid><pubDate>Fri, 14 Jun 2019 18:15:10 GMT</pubDate><content:encoded>&lt;p&gt;This is a quick post about the difference between &lt;code class=&quot;language-text&quot;&gt;Data Races&lt;/code&gt; and
&lt;code class=&quot;language-text&quot;&gt;Race Conditions&lt;/code&gt;, and how data structures or patterns providing freedom
from data races can fail to provide race condition freedom.&lt;/p&gt;
&lt;p&gt;The examples will be given in &lt;code class=&quot;language-text&quot;&gt;Go&lt;/code&gt;, since that&apos;s a language with a few
of the concurrent constructs that come into play here, as well as the language
that sparked this blog post in the first place.&lt;/p&gt;
&lt;h2&gt;Data Races&lt;/h2&gt;
&lt;p&gt;I agree almost entirely with
&lt;a href=&quot;https://doc.rust-lang.org/nomicon/races.html&quot;&gt;rust&apos;s definition of data races&lt;/a&gt;.
Under this definition, a data race is when one or more threads concurrently
access a location in memory / variable, at least one of which is a write,
and at least one of which is not synchronized with other threads.&lt;/p&gt;
&lt;p&gt;For example, multiple concurrent reads to an unsychronized variable are perfectly
fine:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;go&quot;&gt;&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        fmt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Thread B: %d\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    fmt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Thread A: %d\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Even though the order of printing will vary from execution to execution,
there are no data races since both threads are merely reading from the data.&lt;/p&gt;
&lt;p&gt;If we now have one of the threads access &lt;code class=&quot;language-text&quot;&gt;a&lt;/code&gt; mutably, we introduce a data race:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;go&quot;&gt;&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    a &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    fmt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Thread A: %d\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can solve this by introducing a mutex to synchronize access to &lt;code class=&quot;language-text&quot;&gt;a&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;go&quot;&gt;&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    a &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; m sync&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Mutex
    &lt;span class=&quot;token keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Lock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;
        m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Unlock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Lock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    fmt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Thread A: %d\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Unlock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Both threads are accessing &lt;code class=&quot;language-text&quot;&gt;a&lt;/code&gt; at the same time, and one of them is writing,
but since the access is synchronized, this is no longer a data race.&lt;/p&gt;
&lt;h2&gt;Race Conditions&lt;/h2&gt;
&lt;p&gt;Race conditions stem from &lt;code class=&quot;language-text&quot;&gt;non-determinism&lt;/code&gt; in concurrent programs.
In theory any observable non-determinism from concurrency could be &lt;em&gt;considered&lt;/em&gt;
a race condition, but in practice what constitutes a race condition depends
on what properties we want our program to respect.&lt;/p&gt;
&lt;p&gt;Let&apos;s take the following program as an example:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;go&quot;&gt;&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            fmt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Thread B&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        fmt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Thread A&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We&apos;ll see some sort of random interleaving of the two messages:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Thread A
Thread A
Thread B
Thread A
Thread B
Thread B
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This could be considered a race condition, if the exact order of the printing
was a property we wanted our program to respect. We could use some form of
synchronization to enforce that order of printing.&lt;/p&gt;
&lt;p&gt;In practice we wouldn&apos;t consider this a race condition even if the execution
isn&apos;t deterministic, because this isn&apos;t a property we care about.&lt;/p&gt;
&lt;p&gt;In summary, a race condition is some violation of the properties our program
should have arising from the concurrent execution of the program.&lt;/p&gt;
&lt;h2&gt;Race Conditions without Data Races&lt;/h2&gt;
&lt;p&gt;The reason I decided to make this post was a discussion I had recently.
Someone was claiming that using Go&apos;s channels prevents &lt;em&gt;race conditions&lt;/em&gt;
because the operations are always thread safe.&lt;/p&gt;
&lt;p&gt;It is true that Go&apos;s channels are free from &lt;em&gt;data races&lt;/em&gt;, so long as memory
isn&apos;t shared in other ways. That being, said it&apos;s pretty easy to
write a program that has a race condition despite only using channels.&lt;/p&gt;
&lt;p&gt;In this example, we&apos;ll have a simple server responding to requests to get
the value of an integer, and to set the value of an integer.&lt;/p&gt;
&lt;p&gt;The messages look like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;go&quot;&gt;&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; msg &lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    id &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;
    amount &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We&apos;ll use &lt;code class=&quot;language-text&quot;&gt;0&lt;/code&gt; as the id for &lt;code class=&quot;language-text&quot;&gt;get&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;1&lt;/code&gt; as the id for &lt;code class=&quot;language-text&quot;&gt;set&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Our server type will look like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;go&quot;&gt;&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; server &lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  msgs &lt;span class=&quot;token keyword&quot;&gt;chan&lt;/span&gt; msg
  resps &lt;span class=&quot;token keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;newServer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;server &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  msgs &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;chan&lt;/span&gt; msg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  resps &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;server&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;msgs&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; resps&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We have a channel to be able to send and receive messages for the server,
as well as a channel for the responses to those messages.&lt;/p&gt;
&lt;p&gt;Our server will start in the background with the following function:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;go&quot;&gt;&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;server&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  state &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    m &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;msgs&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;resps &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; state
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;amount
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We respond to get requests by sending back the current state, and to set requests
by setting the concurrent state. Since only one thread is in control
of the state, interactions with the server are free from data races.&lt;/p&gt;
&lt;p&gt;The basic operations with our server look like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;go&quot;&gt;&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;server&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;msgs &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; msg&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;resps
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;server&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;amount &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;msgs &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; msg&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; amount&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now with those basic operations, we can define the following function:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;go&quot;&gt;&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;server&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  x &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This function simply increments the state.&lt;/p&gt;
&lt;p&gt;In our main function, we can do the following:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;go&quot;&gt;&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  s &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;newServer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;go&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  fmt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will perform 200 increment operations, leaving the state at 200, as expected.&lt;/p&gt;
&lt;p&gt;But if we start sharing these operations between threads, we&apos;ll notice
a race condition:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;go&quot;&gt;&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  s &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;newServer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;go&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  fmt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We would expect to see 200, as before, but in practice we&apos;ll see a smaller number.
This is a race condition. This happens because 2 threads can get the same value
before setting the next one, and then both will set the same value, leading
to 2 calls to increment only performing a single increment.&lt;/p&gt;
&lt;h2&gt;Simple fixes are not enough&lt;/h2&gt;
&lt;p&gt;What we want is an &lt;em&gt;atomic operation&lt;/em&gt;. In this case an atomic increment.
An atomic increment would mean that each increment happens as a single step,
and thus prevent two concurrent increments from only leading to a single
operation.&lt;/p&gt;
&lt;p&gt;We could add such an operation to our server with an additional message,
let&apos;s say with id &lt;code class=&quot;language-text&quot;&gt;2&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;go&quot;&gt;&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    state&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The problem is that the following function still wouldn&apos;t be atomic:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;go&quot;&gt;&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;server&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;doubleIncrement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;No matter what set of atomic operations our server provides for its state,
we can&apos;t simply perform multiple operations in sequence, in an unsynchronized
manner, and expect the result to also be atomic.&lt;/p&gt;
&lt;p&gt;The full code for this example can be found here:
&lt;a href=&quot;https://play.golang.org/p/995MLEiqIVV&quot;&gt;https://play.golang.org/p/995MLEiqIVV&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Data races should not be conflated with race conditions. Just because
a data structure provides data race free operations, doesn&apos;t mean that race conditions
can&apos;t happen with that data structure. Furthermore, sequencing
atomic operations does not yield an atomic operations.&lt;/p&gt;
&lt;p&gt;Designing concurrent programs without bugs is not trivial, and becomes
even more complicated once you start working with multiple computers.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Introducing Ludus]]></title><description><![CDATA[This is a short post about a crate I recently published:
https://crates.io/crates/ludus. This crate provides the core logic of an NES…]]></description><link>https://cronokirby.github.io/posts/introducing-ludus/</link><guid isPermaLink="false">https://cronokirby.github.io/posts/introducing-ludus/</guid><pubDate>Thu, 13 Jun 2019 19:35:12 GMT</pubDate><content:encoded>&lt;p&gt;This is a short post about a crate I recently published:
&lt;a href=&quot;https://crates.io/crates/ludus&quot;&gt;https://crates.io/crates/ludus&lt;/a&gt;. This crate provides the core logic of an NES
emulator, and can be used to build independent GUI applications.&lt;/p&gt;
&lt;p&gt;Ludus started out as a standalone NES emulator, back in October of 2018.
At that point, I had gotten a completely working emulator, aside from
some pretty glaring audio issues. I wanted to revisit it at some point, in
order to fix the audio.&lt;/p&gt;
&lt;p&gt;I recently had time to do so, so I went in and cleaned up the code base a bit,
and ended up finding the causes of the audio bugs.&lt;/p&gt;
&lt;p&gt;The first thing I did was running
&lt;a href=&quot;https://github.com/rust-lang/rust-clippy&quot;&gt;clippy&lt;/a&gt;
on the entire codebase, and found quite a few issues. The main issue had
to do with a clippy warning for up-casts like:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;rust&quot;&gt;&lt;pre class=&quot;language-rust&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; u8&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
x &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; u16&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Clippy doesn&apos;t like this because it can introduce implicit truncation if
the type of &lt;code class=&quot;language-text&quot;&gt;x&lt;/code&gt; ever grew larger. These types of casts appear very frequently
throughout the emulator.&lt;/p&gt;
&lt;p&gt;That being said, clippy actually did find the bugs in the APU causing the audio
glitches:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;rust&quot;&gt;&lt;pre class=&quot;language-rust&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;040&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x40&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code was flagged as being an impossible check, rightly so. There were a handful
of issues like this in the APU causing weird behavior, fixing all the clippy
checks thankfully solved all the audio issues.&lt;/p&gt;
&lt;p&gt;After cleaning up the emulator, and fixing these audio bugs after so long,
I decided to go ahead and work on one of the mappers I hadn&apos;t added yet.
I added &lt;code class=&quot;language-text&quot;&gt;iNES1&lt;/code&gt; which is the mapper used for games like
&lt;code class=&quot;language-text&quot;&gt;Zelda&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;Final Fantasy&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;At that point I wanted to experiment with different audio and video backends,
although I ended up sticking with &lt;a href=&quot;https://crates.io/crates/minifb&quot;&gt;minifb&lt;/a&gt;
for video, and &lt;a href=&quot;https://crates.io/crates/cpal&quot;&gt;cpal&lt;/a&gt; for audio.&lt;/p&gt;
&lt;p&gt;To make that easier, I ended up creating traits for the video and audio devices,
and made the core logic of the emulator depend on traits, instead of the
concrete video and audio structs that were needed:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;rust&quot;&gt;&lt;pre class=&quot;language-rust&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;trait&lt;/span&gt; VideoDevice &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;blit_pixels&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; pixels&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;PixelBuffer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;trait&lt;/span&gt; AudioDevice &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;push_sample&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sample&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; f32&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At that point I realised that the core of the emulator could be split off from
the rest of the crate that depended on specific backend logic. The core logic
crate doesn&apos;t even have any dependencies, which is very nice. It could possibly
work with &lt;code class=&quot;language-text&quot;&gt;#[no_std]&lt;/code&gt; but I haven&apos;t looked into that at all.&lt;/p&gt;
&lt;p&gt;The application you can use to play games is available
&lt;a href=&quot;https://github.com/cronokirby/ludus-emu&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The standalone crate can be used to create your own NES emulator applications,
and is available &lt;a href=&quot;https://crates.io/crates/ludus&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Persistent-ts]]></title><description><![CDATA[This is a library providing a handful of persistent data structures for Typescript.
This includes immutable collections like linked-lists…]]></description><link>https://cronokirby.github.io/projects/persistent-ts/</link><guid isPermaLink="false">https://cronokirby.github.io/projects/persistent-ts/</guid><pubDate>Mon, 20 May 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This is a library providing a handful of persistent data structures for Typescript.
This includes immutable collections like linked-lists, and clojure-style vectors.
Persistent data structures are immutable, but can efficiently share data between instances,
and are thus more efficient than a normal copy-on-write collection when working without mutation.&lt;/p&gt;
&lt;!--more--&gt;</content:encoded></item><item><title><![CDATA[The Component Pattern]]></title><description><![CDATA[This post details a useful pattern for organizing stateful components in functional code.
This post assumes knowledge of Haskell, up to…]]></description><link>https://cronokirby.github.io/posts/component-pattern/</link><guid isPermaLink="false">https://cronokirby.github.io/posts/component-pattern/</guid><pubDate>Tue, 14 May 2019 11:57:24 GMT</pubDate><content:encoded>&lt;p&gt;This post details a useful pattern for organizing stateful components in functional code.
This post assumes knowledge of &lt;strong&gt;Haskell&lt;/strong&gt;, up to &lt;strong&gt;Monad-Transformers&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;The organization of a codebase is important: how the files are the laid out, and how
the structures inside those files mesh together. A poorly laid out codebase can be difficult
to navigate and expand. Poorly laid out code can be hard to understand, and even harder to
build upon.&lt;/p&gt;
&lt;p&gt;A running system will be composed of different components. These components are the different
&quot;bundles of functionality&quot; that make up the behavior of our program. They may or may not have
analogues in the codebase itself, but a poorly organized codebase rarely makes for a well organized
set of components.&lt;/p&gt;
&lt;p&gt;Organization is no less of a concern in &lt;em&gt;Functional Programming&lt;/em&gt; than it is in the more common
forms of programming. In fact, the goals we&apos;d like our codebase and running system to achieve
are the same for both: Modularity and Extensibility, to list a few. Even in &lt;em&gt;Haskell&lt;/em&gt;, real-world
applications have stateful and effectful components to carry out the duties of a program.&lt;/p&gt;
&lt;p&gt;There is less talk about this organizational aspect of code in the &quot;functional literature&quot;, but it is
no less important. I think that this is because the organizational side of things is less unique or interesting
compared to other aspects of &lt;em&gt;Functional Programming&lt;/em&gt;. Because of this, newcomers can learn a lot about the functional
paradigm, yet still feel unequipped to work on their own projects.&lt;/p&gt;
&lt;h3&gt;Differences from Imperative languages&lt;/h3&gt;
&lt;p&gt;The main difference in a language like &lt;strong&gt;Haskell&lt;/strong&gt; as compared to the more common
imperative languages, is the push towards pure functions. Pure functions are
a good organizational tool, since they make sure we don&apos;t couple functions to surrounding
state or effects. Because of this, organizing pure functions doesn&apos;t require as much care in terms
of runtime effects. Our code may be hard to understand because of its bad organization,
but it&apos;s unlikely to have far reaching side effects.&lt;/p&gt;
&lt;h3&gt;Organising Stateful Components&lt;/h3&gt;
&lt;p&gt;Unfortunately, not all programs can be completely pure. Most programs have at least &lt;em&gt;some&lt;/em&gt;
component that requires an effect of some kind, or needs to keep track of some changing state.&lt;/p&gt;
&lt;p&gt;In &lt;em&gt;Object-Oriented&lt;/em&gt; programming, the tool to segregate away effects or state is the &lt;strong&gt;Class&lt;/strong&gt;.
In hybrid languages, like &lt;strong&gt;F#&lt;/strong&gt; or &lt;strong&gt;Scala&lt;/strong&gt;, using a class to organize a component like this is a perfectably
acceptable solution. In &lt;strong&gt;Haskell&lt;/strong&gt;, however, we can&apos;t use this tool. The tools we can use are the &lt;strong&gt;module&lt;/strong&gt; and
the &lt;strong&gt;context&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Modules allow us to organize code in a way that keeps the non-essential implementation details hidden, but the abstract
interface to that module exposed. This is similar to classes, except that the module itself has no state or effects.
A &quot;context&quot; allows us to write functions with access to effects or state. We can then export these functions directly from the module,
along with the details of that context, or we can hide that context, as we&apos;ll see later. &lt;strong&gt;Haskell&lt;/strong&gt; can
implement contexts in different ways, but we&apos;ll be looking at &lt;a href=&quot;https://wiki.haskell.org/Monad_Transformers&quot;&gt;monad transformers&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;The Component Pattern&lt;/h3&gt;
&lt;p&gt;Let&apos;s get into the meat of the pattern. The idea is to pair a conceptual component of a system,
say, a &lt;em&gt;logger&lt;/em&gt;, for example, along with a concrete module, and effect type.&lt;/p&gt;
&lt;p&gt;Let&apos;s use our logger example more fully. Our project needs a component
responsible for logging things to a file. We can send messages for it a log across a queue,
and it has a file that it logs to.&lt;/p&gt;
&lt;p&gt;First we&apos;d create a module to contain this, say &lt;code class=&quot;language-text&quot;&gt;Logger.hs&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;hs&quot;&gt;&lt;pre class=&quot;language-hs&quot;&gt;&lt;code class=&quot;language-hs&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;where&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- imports ommitted&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The next step is to define a type that contains all the information the logger needs to run:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;hs&quot;&gt;&lt;pre class=&quot;language-hs&quot;&gt;&lt;code class=&quot;language-hs&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;LoggerInfo&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;LoggerInfo&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;loggerQueue&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;TBQueue&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Message&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;loggerFile&lt;/span&gt;  &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;FilePath&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we create a new effect type, which is just a Reader with access to that information:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;hs&quot;&gt;&lt;pre class=&quot;language-hs&quot;&gt;&lt;code class=&quot;language-hs&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;LoggerM&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;LoggerM&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;ReaderT&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;LoggerInfo&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now inside the module itself, we write the functions we need as &lt;code class=&quot;language-text&quot;&gt;LoggerM a&lt;/code&gt;, for example:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;hs&quot;&gt;&lt;pre class=&quot;language-hs&quot;&gt;&lt;code class=&quot;language-hs&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;latestMessage&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;LoggerM&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Message&lt;/span&gt;

&lt;span class=&quot;token hvariable&quot;&gt;logMessages&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;LoggerM&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We also have a main function that contains all the things a component needs to do, sort of like
a &quot;main loop&quot; for that component:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;hs&quot;&gt;&lt;pre class=&quot;language-hs&quot;&gt;&lt;code class=&quot;language-hs&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;LoggerM&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At this point we have the tools to express functions for that component inside the module itself,
but no API to interact with the component from outside. We have 2 options for exposing this
component to the outside world.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Export &lt;code class=&quot;language-text&quot;&gt;LoggerInfo&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;LoggerM&lt;/code&gt;, as well as &lt;code class=&quot;language-text&quot;&gt;main&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We&apos;d have functions to construct &lt;code class=&quot;language-text&quot;&gt;LoggerInfo&lt;/code&gt; as well as run &lt;code class=&quot;language-text&quot;&gt;LoggerM&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;hs&quot;&gt;&lt;pre class=&quot;language-hs&quot;&gt;&lt;code class=&quot;language-hs&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;makeLoggerInfo&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;LoggerInfo&lt;/span&gt;

&lt;span class=&quot;token hvariable&quot;&gt;runLoggerM&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;LoggerM&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;LoggerInfo&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Completely hide the existence of &lt;code class=&quot;language-text&quot;&gt;LoggerInfo&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;LoggerM&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With this choice, we&apos;d only export a function that constructs and runs the main logger computation:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;hs&quot;&gt;&lt;pre class=&quot;language-hs&quot;&gt;&lt;code class=&quot;language-hs&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;runLoggerMain&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Regardless of which choice we make, we&apos;re free to start the logger component in a new thread if we want.
This is usually done, because components generally contain independent pieces of state, and spend all their time
doing the same thing over and over, rather than acting as a one time task.&lt;/p&gt;
&lt;p&gt;Hiding everything is the preferred choice, as it provides more encapsulation, and a cleaner API.
Users of the component can ignore the implementation details of the component completely, and just run a single
function in a new thread after passing it all the prerequisite information.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;In summary, the component pattern looks something like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;hs&quot;&gt;&lt;pre class=&quot;language-hs&quot;&gt;&lt;code class=&quot;language-hs&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;startComponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;where&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ComponentInfo&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ComponentM&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ComponentM&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;ReaderT&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ComponentInfo&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token hvariable&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ComponentM&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token hvariable&quot;&gt;startComponent&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Dependencies&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This isn&apos;t the end-all-be-all of organising stateful components of a larger project,
but hopefully this is a useful pattern to put in the toolbox :)&lt;/p&gt;
&lt;h2&gt;Further Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.fpcomplete.com/blog/2017/06/readert-design-pattern&quot;&gt;https://www.fpcomplete.com/blog/2017/06/readert-design-pattern&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Bittorrent Is Hard - 1]]></title><description><![CDATA[About these posts I've been working on a bittorrent client in haskell
recently. It's now at the point where it can download torrents in the…]]></description><link>https://cronokirby.github.io/posts/bittorrent-the-hard-parts1/</link><guid isPermaLink="false">https://cronokirby.github.io/posts/bittorrent-the-hard-parts1/</guid><pubDate>Fri, 03 May 2019 14:54:09 GMT</pubDate><content:encoded>&lt;h2&gt;About these posts&lt;/h2&gt;
&lt;p&gt;I&apos;ve been working on a &lt;a href=&quot;https://github.com/cronokirby/haze&quot;&gt;bittorrent client&lt;/a&gt; in haskell
recently. It&apos;s now at the point where it can download torrents in the wild.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://wiki.theory.org/index.php/BitTorrentSpecification&quot;&gt;protocol itself&lt;/a&gt;
is well specified, although it takes a few read-throughs to get the hang of it.
The first time I read through the protocol I didn&apos;t understand much. But as I started
implementing different parts of the protocol, those parts of the document started making
more and more sense.&lt;/p&gt;
&lt;p&gt;That being said, there are still many parts of the protocol where the specification might
be clear, but &lt;em&gt;how&lt;/em&gt; to implement that specification is left as an exercise to the reader.
One of the sections that&apos;s most guilty of this is the section related to how peer&apos;s operate.
There are many subtle rules about what peers should do in certain situations; the details
of what variables to keep track of and how to make sure all these conditions are satisfied
is a big leap from this description though.&lt;/p&gt;
&lt;p&gt;In these series of posts, I want to try and explain the details that go into some of the algorithms
necessary to implement &lt;strong&gt;Bittorrent&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This post covers how to save the pieces that make up the data in a torrent to disk, and how to recompose
those pieces back together.&lt;/p&gt;
&lt;h3&gt;Side Note: What is Bittorrent?&lt;/h3&gt;
&lt;p&gt;If you&apos;re already familiar with &lt;strong&gt;torrents&lt;/strong&gt; or &lt;strong&gt;Bittorrent&lt;/strong&gt;, then this section can be safely ignored.&lt;/p&gt;
&lt;p&gt;Let me briefly explain these concepts.&lt;/p&gt;
&lt;p&gt;Fundamentally, &lt;strong&gt;Bittorrent&lt;/strong&gt; is a protocol that defines a way for multiple computers, which
we refer to as &quot;peers&quot;, to download a file from eachother. Instead of each peer downloading
the file from a central server, they instead download different parts from eachother, and upload
the parts they have to the other peers that want those parts.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;torrent&lt;/strong&gt; refers to this group of peers sharing a file.&lt;/p&gt;
&lt;h2&gt;Torrents and Pieces&lt;/h2&gt;
&lt;p&gt;A torrent can contain either a single file, or multiple files. When a torrent contains multiple files,
it can optionally contain a root directory for those files. For example, &lt;code class=&quot;language-text&quot;&gt;blockbuster.torrent&lt;/code&gt; might
contain a single &lt;code class=&quot;language-text&quot;&gt;blockbuster.mp4&lt;/code&gt; file, or perhaps &lt;code class=&quot;language-text&quot;&gt;blockbuster.mp4, blockbuster.subtitles&lt;/code&gt; in a &lt;code class=&quot;language-text&quot;&gt;blockbuster&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;I mentioned previously that peers trade &quot;parts&quot; of a file. Instead of considering each peer as either having
the entire file, or not having it, and then downloading from those that have the &lt;strong&gt;whole&lt;/strong&gt; file, we divide the file
into parts. We call these parts &lt;strong&gt;pieces&lt;/strong&gt;. At any given point in time, we know which peers have which pieces (or at least, claim to), and what
pieces we have, and can make decisions about which piece to download next from whom.&lt;/p&gt;
&lt;p&gt;The piece is also the unit of integrity of the torrent. Each piece has a SHA1 hash associated with it,
and when we receive a piece, we can hash the data inside, and see if it matches. This allows us to make sure that we&apos;re not
downloading junk data.&lt;/p&gt;
&lt;h2&gt;Pieces and Division&lt;/h2&gt;
&lt;p&gt;A torrent contains information about what files are in it, as mentioned previously. It also contains information about
how big the pieces are: this is a single number specifying how big each piece is.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Complication: All pieces are the same size, except for the last one.&lt;/strong&gt;
Let me illustrate this problem with an example. Let&apos;s say our piece size is 2 bytes, and our torrent contains 5 bytes
in total (let&apos;s skim over how this data is divided into files for now). Our data is divided like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;txt&quot;&gt;&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;xx xx x&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first 2 pieces have the announced size, 2 bytes, but the last piece has to be whatever size necessary to &quot;plug in&quot;
the end of the data.&lt;/p&gt;
&lt;p&gt;This is just an edge case to worry about, and not as tricky as the next complication:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Complication: Pieces don&apos;t belong to one file&lt;/strong&gt;
Let&apos;s continue using the same example as the previous complication, but further specify that the torrent actually
contains 2 files: A.png B.png. A is 3 bytes, and B 2 bytes. Our data would now look like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;txt&quot;&gt;&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;AA AB B&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The second piece now contains data from 2 different files!&lt;/p&gt;
&lt;p&gt;This is because, as far as pieces are concerned, the torrent is just a binary blob. When peers are trading
pieces it&apos;s as if the torrent just contained a single file. In fact, in the case of a single file, we don&apos;t have this
problem at all, since all the pieces belong to this file.&lt;/p&gt;
&lt;p&gt;When there are multiple files, they have a defined order. Conceptually, the binary data in these files
is concatenated together, in this predefined order, and then piece division happens as if it were a single file.
This means that a piece may actually contain data belonging to an arbitrary of files. It&apos;s actually quite
common for a piece to overlap many files. Because movies, which are large, often come with subtitles, which are relatively
much smaller, the piece size we use for those torrents are usually larger than the size of all the subtitles combined.
It&apos;s not uncommon for a single piece to actually contain all of the subtitles as well as a chunk of the movie itself:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;txt&quot;&gt;&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;ABCDEFGHIJXXXXXXXX XXXXX...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;What our algorithm needs to do&lt;/h2&gt;
&lt;p&gt;Now we get to the crux of this post: the algorithm for saving and retrieving pieces.&lt;/p&gt;
&lt;p&gt;We can break down what we do with pieces into 3 seperate tasks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Recomposing the pieces into the torrent&apos;s files&lt;/li&gt;
&lt;li&gt;Saving pieces to disk&lt;/li&gt;
&lt;li&gt;Reading pieces from disk&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Recomposing the pieces into the torrent&apos;s files&lt;/h3&gt;
&lt;p&gt;After we&apos;ve downloaded all the pieces, we need to actually assemble the files
that compose the torrent from the binary data in those pieces. We need to handle this somehow.
One option would be to wait until we have all pieces and then glue them together, another would be
to save to files as soon as we have all the pieces in that file.&lt;/p&gt;
&lt;h3&gt;Saving the pieces to disk&lt;/h3&gt;
&lt;p&gt;Although we could keep all pieces in memory until we have them all, and then flush them out to disk,
this doesn&apos;t work very well for actual torrents, which can easily be multiple gigabytes in size.
We need a way to save pieces to disk as they arrive, in such a way that we can easily recompose the pieces
into the files that make up the torrent once we have them all.&lt;/p&gt;
&lt;h3&gt;Reading pieces from disk&lt;/h3&gt;
&lt;p&gt;A key aspect of bittorrent is that peers aren&apos;t just downloading from other peers, but also
uploading the pieces of the files that they already have. Since we don&apos;t keep pieces in memory,
but instead save them to disk, we need a way to retrieve these pieces from disk. We also need
to be able to do this no matter what stage we&apos;re at. We need a way to read pieces back, whether
we&apos;ve glued the pieces back into the torrent files yet or not.&lt;/p&gt;
&lt;p&gt;I&apos;ve stuck to details of the protocol itself so far. Now I&apos;m going to describe the approach I came
up with for this algorithm. This is not at all a unique approach, nor is it the only, or best way
to tackle this problem.&lt;/p&gt;
&lt;h2&gt;Piece files, start files, and end files&lt;/h2&gt;
&lt;p&gt;Before we can even start on an algorithm to save pieces to to the right place, we need to decide
on what the &quot;right place&quot; is in the first place.&lt;/p&gt;
&lt;p&gt;One choice would be to always work within
the files in the torrent: when we save a piece, we save different bits of the piece to different sections
of different files. We modify the final files directly. This has the advantage of not needing a final
recomposition step, since we&apos;re always working with the files themselves. The disadvantage is that the operation
of figuring out which sections of which files to write to is quite complicated.&lt;/p&gt;
&lt;p&gt;Another approach, which is the one I chose, is instead to use as many files as convenient, and then
recompose them together as a final step. For example, instead of trying to figure out where &quot;piece #38&quot;
needs to go, we just save it in &lt;code class=&quot;language-text&quot;&gt;piece-38.bin&lt;/code&gt; and worry about recomposing it later.&lt;/p&gt;
&lt;p&gt;We identify the following cases for how we save pieces:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The piece belongs completely into a single file:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;txt&quot;&gt;&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;..xx xxxx xx..&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this case we save &lt;code class=&quot;language-text&quot;&gt;piece #N&lt;/code&gt; to &lt;code class=&quot;language-text&quot;&gt;piece-N.bin&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The piece belongs to multiple files:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this case, we will save the piece into N files, where N is the number of
files the piece belongs to. What these files are named depends on the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If a file fits completely into a piece:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;txt&quot;&gt;&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;xxAAAyy&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;If the piece contains the first bytes of a file&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;txt&quot;&gt;&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;..xx xxAA AA..&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we save the data for that file in &lt;code class=&quot;language-text&quot;&gt;file.start&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note that we could seperate
this into 2 cases, but as we&apos;ll see later, not distinguishing these cases changes nothing in the end,
and makes the algorithm simpler.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If the piece contains the last bytes of a file:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;txt&quot;&gt;&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;..AA AAxx xx..&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we save the data for that file in &lt;code class=&quot;language-text&quot;&gt;file.end&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Data Structures and Algorithms&lt;/h2&gt;
&lt;p&gt;For each of these algorithms, our life is made much easier if we calculate a nicer representation
of the file structure before hand. That is to say, we&apos;ll have a special representation of our
file structures used for writing the pieces, another for recomposing them, as well as a another,
used for reading back the pieces.&lt;/p&gt;
&lt;h3&gt;Recomposing: Data Structure&lt;/h3&gt;
&lt;p&gt;The data structure for recomposing pieces together is pretty simple, for each final file in
the torrent, we keep a list of all its dependencies. That is to say, all the pieces that fit completly
into it, as well as all &lt;code class=&quot;language-text&quot;&gt;file.end&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;file.start&lt;/code&gt; if those exist.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Recompose&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Recompose&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To make our algorithm easier, we want to make sure that the dependencies are in the same order as
they are in the file, so we can reconstruct the file by writing all dependencies in order.&lt;/p&gt;
&lt;h3&gt;Recomposing: Algorithm&lt;/h3&gt;
&lt;p&gt;The algorithm for recomposition is so simple, that we might as well already get it out of the way.
This also illustrates the benefit of this approach of using the most suitable data structure for
implementing our algorithms.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;recompose&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;Recompose&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;mappings&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;token hvariable&quot;&gt;forM_&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;mappings&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;deps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;token hvariable&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;allFilesExist&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;deps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;
            &lt;span class=&quot;token hvariable&quot;&gt;writeAllTo&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;deps&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;file&lt;/span&gt;
            &lt;span class=&quot;token hvariable&quot;&gt;removeAll&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;deps&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For each file, we check if all its dependencies have already been written to,
in which case we can reconstruct the file by concatenating all the dependencies.&lt;/p&gt;
&lt;h3&gt;Saving: Data Structure&lt;/h3&gt;
&lt;p&gt;In order to save each piece, we need to know which files the piece maps to,
and how many bytes are in each piece. Our data structure thus looks like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;SavePieces&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;SavePieces&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;Piece&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This contains a list of &lt;code class=&quot;language-text&quot;&gt;(count, file)&lt;/code&gt; tuples, listing the
files the piece needs to be saved into, in the order they appear, as well
as how many bytes of the piece should be saved in that file.&lt;/p&gt;
&lt;h3&gt;Saving: Algorithm&lt;/h3&gt;
&lt;p&gt;This algorithm is better expressed using an imperative formulation,
but a functional fold would be able to accomplish the same thing:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;py&quot;&gt;&lt;pre class=&quot;language-py&quot;&gt;&lt;code class=&quot;language-py&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;piece&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; mappings&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    bits &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; mappings&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;piece&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    offset &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; bits&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        write&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; piece&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;offset&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;offset&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        offset &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; count&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We just go linearly through each of the files, and save the right amount of the piece.
For this to work correctly, we need to make sure that the order of the files and counts
is correct, otherwise we&apos;ll be saving the wrong part of the piece.&lt;/p&gt;
&lt;h3&gt;Reading: Data Structure&lt;/h3&gt;
&lt;p&gt;The main complexity with reading pieces from disk, is that the piece may be in different locations,
at different times. At the start, a piece might be in different standalone files, some of which get merged
into a larger file. For example, a piece might map to &lt;code class=&quot;language-text&quot;&gt;B.end&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;A.start&lt;/code&gt;, in which case we need to know
to read from &lt;code class=&quot;language-text&quot;&gt;B.end&lt;/code&gt; if it exists, otherwise from the right spot in &lt;code class=&quot;language-text&quot;&gt;B&lt;/code&gt;, and the same with &lt;code class=&quot;language-text&quot;&gt;A&lt;/code&gt;. Note that
it might be the case that B is saved, but A is not, and vice versa.&lt;/p&gt;
&lt;p&gt;Let&apos;s start with a mapping from each piece to the locations it&apos;s stored in:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ReadPieces&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ReadPieces&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;Piece&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;Location&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, a location where a piece can be must contain both the small file containing just information for that piece,
and then the large file where the piece will eventually be embedded.&lt;/p&gt;
&lt;p&gt;Thus, we have:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Location&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Location&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Embedded&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Complete&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Offset&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Count&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Embedded&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Embedded&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Offset&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Count&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Complete&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Complete&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;File&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The embedded location contains the file, as well as the offset and count,
allowing us to easily read the piece from the larger file. For the complete location,
we can just read that section by reading the entire small file.&lt;/p&gt;
&lt;p&gt;We need to store both locations, because we need to have both the complete, smaller location
where that part of the piece is first stored, as well as the larger section of a big file where
the piece will eventually be located. We could keep all the small, temporary files around
until the entire torrent is completed, but even once we&apos;ve completed the whole torrent, we still
need to be able to read pieces in order to upload parts of the file to other pieces.&lt;/p&gt;
&lt;h3&gt;Reading: Algorithm&lt;/h3&gt;
&lt;p&gt;The algorithm can be given now that we&apos;ve seen a good way to organise the data for this
task:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token builtin&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;ReadPieces&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;piece&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;token hvariable&quot;&gt;concatBS&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt; . &lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;forM&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;mapping&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;piece&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Location&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;l&lt;/span&gt;
            &lt;span class=&quot;token constant&quot;&gt;Embedded&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;fileE&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;e&lt;/span&gt;
            &lt;span class=&quot;token constant&quot;&gt;Complete&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;fileC&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;c&lt;/span&gt;
        &lt;span class=&quot;token hvariable&quot;&gt;complete&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;fileExists&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;fileC&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;complete&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;readAll&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;fileC&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;readAt&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;fileE&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can safely assume that if the smaller, but complete, location no longer exists,
then this can only be because the larger file now does. We just concatenate the bytes
for each section of the piece, which we first try and read from the complete file, if it exists,
otherwise we go and read it from the embedded location of the larger file.&lt;/p&gt;
&lt;h3&gt;Interlude&lt;/h3&gt;
&lt;p&gt;We&apos;ve made our life much easier by seperating everything into different distinct tasks,
and using the right data structure for each of those tasks. Using the right data structure
makes the algorithm quite simple. One thing we have yet to see, however, is how to construct
these data structures from the information about the torrent file itself. That will have to wait
for the next post in this series; stay tuned for the next post then :)&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Serve-csv]]></title><description><![CDATA[This is a program that can take a folder of CSV files and serve them as a REST API.
The program also uses a JSON file for each file, to…]]></description><link>https://cronokirby.github.io/projects/serve-csv/</link><guid isPermaLink="false">https://cronokirby.github.io/projects/serve-csv/</guid><pubDate>Tue, 30 Apr 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This is a program that can take a folder of CSV files and serve them as a REST API.
The program also uses a JSON file for each file, to specify how each column maps to a JSON
field. The program is written in Go to make use of the built-in HTTP server.&lt;/p&gt;
&lt;!--more--&gt;</content:encoded></item><item><title><![CDATA[Haze]]></title><description><![CDATA[Haze is a complete bittorrent client, capable of downloading any kind
of torrent found in the wild. Bittorrent is a peer-to-peer protocol…]]></description><link>https://cronokirby.github.io/projects/haze/</link><guid isPermaLink="false">https://cronokirby.github.io/projects/haze/</guid><pubDate>Sun, 28 Apr 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;strong&gt;Haze&lt;/strong&gt; is a complete bittorrent client, capable of downloading any kind
of torrent found in the wild. Bittorrent is a peer-to-peer protocol, where a client
joins a large swarm of peers in order to download a file of common interest. Haskell was
used in order to help manage the concurrency involved in communicating with a large number of
peers.&lt;/p&gt;
&lt;!--more--&gt;</content:encoded></item><item><title><![CDATA[Dex]]></title><description><![CDATA[Live.
Dex is a little frontend app for searching and seeing stats about Pokemon, made with Vue.
The app wraps around the pokeapi REST API…]]></description><link>https://cronokirby.github.io/projects/dex/</link><guid isPermaLink="false">https://cronokirby.github.io/projects/dex/</guid><pubDate>Sat, 27 Apr 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;https://cronokirby.github.io/dex&quot;&gt;Live&lt;/a&gt;.
&lt;strong&gt;Dex&lt;/strong&gt; is a little frontend app for searching and seeing stats about Pokemon, made with Vue.
The app wraps around the &lt;a href=&quot;https://pokeapi.co/&quot;&gt;pokeapi&lt;/a&gt; REST API for information about each Pokemon.&lt;/p&gt;
&lt;!--more--&gt;</content:encoded></item><item><title><![CDATA[Ripple]]></title><description><![CDATA[Ripple is a program implementing a small decentralised chat protocol, written in Go.
The protocol involves participating nodes ferrying…]]></description><link>https://cronokirby.github.io/projects/ripple/</link><guid isPermaLink="false">https://cronokirby.github.io/projects/ripple/</guid><pubDate>Tue, 09 Apr 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;strong&gt;Ripple&lt;/strong&gt; is a program implementing a small decentralised chat protocol, written in &lt;em&gt;Go&lt;/em&gt;.
The protocol involves participating nodes ferrying messages to eachother in a ring like fashion.
New nodes can join the chat by talking to any of the existing nodes in the swarm. &lt;em&gt;Go&lt;/em&gt; is used for
simple networking and concurrency, as well as to provide both a command line, and a graphical terminal interface.
&lt;a href=&quot;/posts/notes-on-ripple/&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;
&lt;!--more--&gt;</content:encoded></item><item><title><![CDATA[Huffman-rs]]></title><description><![CDATA[This is a CLI program using Huffman Coding to compress files. The program is written in Rust
for efficiency.]]></description><link>https://cronokirby.github.io/projects/huffman-rs/</link><guid isPermaLink="false">https://cronokirby.github.io/projects/huffman-rs/</guid><pubDate>Mon, 11 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This is a CLI program using &lt;em&gt;Huffman Coding&lt;/em&gt; to compress files. The program is written in &lt;em&gt;Rust&lt;/em&gt;
for efficiency.&lt;/p&gt;
&lt;!--more--&gt;</content:encoded></item><item><title><![CDATA[Mutability Is a Great Secret To Have]]></title><description><![CDATA[Resisting the urge for purity There's a very common idea spread around in FP circles that
goes something like: "Avoid mutable state". This…]]></description><link>https://cronokirby.github.io/posts/Mutability-is-a-great-secret-to-have/</link><guid isPermaLink="false">https://cronokirby.github.io/posts/Mutability-is-a-great-secret-to-have/</guid><pubDate>Wed, 06 Mar 2019 10:39:03 GMT</pubDate><content:encoded>&lt;h2&gt;Resisting the urge for purity&lt;/h2&gt;
&lt;p&gt;There&apos;s a very common idea spread around in FP circles that
goes something like: &quot;Avoid mutable state&quot;. This is a good idea,
and many articles are out there talking about why this is the case.
I agree with these for the most part, but sometimes people lose the forest
for the trees when thinking about this goal.&lt;/p&gt;
&lt;h2&gt;Why do we want to avoid mutability?&lt;/h2&gt;
&lt;p&gt;One of the biggest advantages of reducing mutable state in our code, is reducing
the working parts we need to keep track of when reasoning about local pieces of code.
When each function is dependent on the global state of the application at that time, we
not only need to think about the parameters of that function, and what it returns,
but also the global state the application might be in when the function is called,
and what effect we have on that state. By reducing mutable state, we reduce
the mental space we need to keep a handle on when reasoning about our code.&lt;/p&gt;
&lt;p&gt;One apparent advantage is that by disentangling our code from global state,
we can treat it as a black box. If the only things a function depends upon
are its parameters, and its only effect on the world is returning some output,
we can treat it like a black box: we don&apos;t care &lt;em&gt;how&lt;/em&gt; it works, we just care about
&lt;em&gt;what&lt;/em&gt; it does, and what properties it has.&lt;/p&gt;
&lt;p&gt;We can combine this black box property with a good set of tests, and really get
all the advantages of this approach. The black box is extremely composable, since
all we need to understand are the holes we can connect things with, and never
the inside of the box itself.&lt;/p&gt;
&lt;h2&gt;FP for clarity&lt;/h2&gt;
&lt;p&gt;Another commonly espoused advantage of FP is that of making individual pieces of code clearer.
In many cases, an algorithm is much better understood when explained in a declarative fashion,
rather than the more traditional imperative way. This can often be much more concise, although
we should avoid confusing concise with easy to understand.&lt;/p&gt;
&lt;p&gt;We should avoid making too direct an equivalence between declarativeness and readability,
because the two are not the same: it&apos;s possible to make imperative code that is readable, and likewise,
declarative code that is completely unreadable. (plenty of people will claim that FP code is much more
obscure, and they can be right at times).&lt;/p&gt;
&lt;h2&gt;The main difference between these two properties&lt;/h2&gt;
&lt;p&gt;The main difference between the &lt;em&gt;black box&lt;/em&gt; property and the &lt;em&gt;clarity&lt;/em&gt; property,
is that the black box property applies to the way we compose code, and to the contracts
that our code respects, but the clarity property applies to the small pieces of code inside the functions we
define. Where the black box property is about the box, the clarity property is about the contents
of that box.&lt;/p&gt;
&lt;p&gt;Often people focus too much on the clarity aspect of FP, because this is the more apparent property.
When writing code in FP, especially when getting used to the approach, and working on smaller snippets,
the clarity property is what comes to the foreground.&lt;/p&gt;
&lt;p&gt;The problem is that people focus too much on clarity and declarativeness in the small, and forget about
the black box property. Sometimes a declarative implementation of a piece of code isn&apos;t the clearest.
In those cases however, we don&apos;t have to sacrifice the black box properties of that function if we
choose to implement it in an imperative way. We can have a function that depends on no global state, and
doesn&apos;t have any visible side effects, but still using mutability as an implementation.&lt;/p&gt;
&lt;h2&gt;A small example&lt;/h2&gt;
&lt;p&gt;To illustrate a situation where a declarative decomposition of a problem ends up yielding a more obtuse implementation.
Let&apos;s try implementing a prime sieve in python. The goal of this function is to return a list of the prime numbers up to a max value.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;py&quot;&gt;&lt;pre class=&quot;language-py&quot;&gt;&lt;code class=&quot;language-py&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; itertools &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;reduce&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;primes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mx&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;lambda&lt;/span&gt; l&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; l &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;lambda&lt;/span&gt; d&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; d &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; l&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; l &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; mx&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now this is a somewhat contrived way of doing it, since &lt;code class=&quot;language-text&quot;&gt;reduce&lt;/code&gt; begs for an imperative implementation,
but this is a pretty easy way of doing this in a purely declarative way. As expected,
this function has no visible side effects, and depends only on the parameters passed to it.&lt;/p&gt;
&lt;p&gt;The only downside is that for people not familiar with &lt;code class=&quot;language-text&quot;&gt;reduce&lt;/code&gt; or with FP in python more generally,
this isn&apos;t the easiest function to understand. And even for a person quite familiar with declarative code,
it isn&apos;t clear to follow the execution of this code.&lt;/p&gt;
&lt;p&gt;One reason for this, is that reduce introduces a bit of imperative control flow, but in a declarative way.
This is a necessary thing to do in a purely functional language such as Haskell, and a useful tool
in languages that aren&apos;t as purely functional, such as python in our case. But reduce is often
less clear than an imperative version of the same code.&lt;/p&gt;
&lt;h2&gt;Back to imperative&lt;/h2&gt;
&lt;p&gt;Let&apos;s try the code again in an imperative form:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;py&quot;&gt;&lt;pre class=&quot;language-py&quot;&gt;&lt;code class=&quot;language-py&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;primes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mx&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    acc &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; mx&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        found &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;False&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; d &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; acc&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; d &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
                found &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;True&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;not&lt;/span&gt; found&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            acc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;append&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; acc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We no longer have a single line, but we have an easier to follow function. This is more or less just an unrolling of
the previous function, making all the underlying functions explicit, instead of composed together.
The important thing is that all the external properties satisfied by the previous function are satisfied by the current one.
The function doesn&apos;t have any visible side effects, and doesn&apos;t depend on any global state, just the arguments passed to it.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;The more general takeaway from these examples is that declarativeness for its own sake isn&apos;t necessary,
and that the external properties of a function are much more important to a codebase. Stateless functions
have the same benefits regardless of their implementation, and in fact, free us up to implement them in whatever
way fits our requirements, be they performance, or readability.&lt;/p&gt;
&lt;p&gt;Let&apos;s try and keep the spirit of the law in mind, over the letter.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Bittrickle]]></title><description><![CDATA[Bittrickle is an implementation of Bittorrent's UDP tracker protocol. A tracker keeps
track of peers participating in a bittorrent swarms…]]></description><link>https://cronokirby.github.io/projects/bittrickle/</link><guid isPermaLink="false">https://cronokirby.github.io/projects/bittrickle/</guid><pubDate>Tue, 26 Feb 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;strong&gt;Bittrickle&lt;/strong&gt; is an implementation of Bittorrent&apos;s UDP tracker protocol. A tracker keeps
track of peers participating in a bittorrent swarms, sharing files. Peers communicate with
the tracker in order to learn about each other. This implementation uses &lt;em&gt;Rust&lt;/em&gt; because of its
built-in UDP networking.&lt;/p&gt;
&lt;!--more--&gt;</content:encoded></item><item><title><![CDATA[Cauchy]]></title><description><![CDATA[Cauchy is a program to generate plots of complex functions, written in Rust
Cauchy is hardware-accelerated, using OpenGL to generate the…]]></description><link>https://cronokirby.github.io/projects/cauchy/</link><guid isPermaLink="false">https://cronokirby.github.io/projects/cauchy/</guid><pubDate>Tue, 22 Jan 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;strong&gt;Cauchy&lt;/strong&gt; is a program to generate plots of complex functions, written in &lt;em&gt;Rust&lt;/em&gt;
&lt;strong&gt;Cauchy&lt;/strong&gt; is hardware-accelerated, using &lt;em&gt;OpenGL&lt;/em&gt; to generate the plots using the GPU.&lt;/p&gt;
&lt;!--more--&gt;</content:encoded></item><item><title><![CDATA[Populate]]></title><description><![CDATA[This is a CLI program that can recreate a music library on a new machine by downloading
the files from various sources across the web. The…]]></description><link>https://cronokirby.github.io/projects/populate/</link><guid isPermaLink="false">https://cronokirby.github.io/projects/populate/</guid><pubDate>Wed, 07 Nov 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This is a CLI program that can recreate a music library on a new machine by downloading
the files from various sources across the web. The program parses a file
with a hierarchical description of the library to replicate , and reproduces
that structure by consuming the sources described.
The program can also split up larger albums (via FFmpeg) into individual songs if necessary.&lt;/p&gt;
&lt;!--more--&gt;</content:encoded></item><item><title><![CDATA[Darby]]></title><description><![CDATA[This is a CLI program to take a folder of songs and play them in a random order.
SDL's audio subsystem is used to play audio files. This…]]></description><link>https://cronokirby.github.io/projects/darby/</link><guid isPermaLink="false">https://cronokirby.github.io/projects/darby/</guid><pubDate>Wed, 07 Nov 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This is a CLI program to take a folder of songs and play them in a random order.
SDL&apos;s audio subsystem is used to play audio files. This program was built to accompany
&lt;a href=&quot;https://github.com/cronokirby/populate&quot;&gt;populate&lt;/a&gt;, which generates folders filled with songs,
ready for consumption by this program.&lt;/p&gt;
&lt;!--more--&gt;</content:encoded></item><item><title><![CDATA[Peerbin]]></title><description><![CDATA[Live.
This project provides a version of websites like pastebin, or hastebin, except without
a central server to store the files; instead…]]></description><link>https://cronokirby.github.io/projects/peerbin/</link><guid isPermaLink="false">https://cronokirby.github.io/projects/peerbin/</guid><pubDate>Thu, 01 Nov 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;https://cronokirby.github.io/peerbin/#/&quot;&gt;Live&lt;/a&gt;.
This project provides a version of websites like pastebin, or hastebin, except without
a central server to store the files; instead users send the files to eachother
via &lt;a href=&quot;https://webtorrent.io/&quot;&gt;webtorrent&lt;/a&gt;. &lt;em&gt;Elm&lt;/em&gt; is used for the main
UI components, and &lt;em&gt;Javascript&lt;/em&gt; to glue this code with the webtorrent part.&lt;/p&gt;
&lt;!--more--&gt;</content:encoded></item><item><title><![CDATA[Hax]]></title><description><![CDATA[Hax is a bullet hell game, in the same vein as others like Touhou or Ikaruga.
The game is written in Haskell, using SDL for handling the…]]></description><link>https://cronokirby.github.io/projects/hax/</link><guid isPermaLink="false">https://cronokirby.github.io/projects/hax/</guid><pubDate>Mon, 01 Oct 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;strong&gt;Hax&lt;/strong&gt; is a bullet hell game, in the same vein as others like &lt;em&gt;Touhou&lt;/em&gt; or &lt;em&gt;Ikaruga&lt;/em&gt;.
The game is written in Haskell, using SDL for handling the drawing logic. The game
logic benefits greatly from the use of an entity component system for handling the many entities
in the game. &lt;a href=&quot;https://hackage.haskell.org/package/apecs&quot;&gt;Apecs&lt;/a&gt; was used to provide the scaffolding
for this ECS.&lt;/p&gt;
&lt;!--more--&gt;</content:encoded></item><item><title><![CDATA[Ludus]]></title><description><![CDATA[Ludus is an emulator for the NES console, written in Rust. The emulator
fully emulates, the core CPU, as well as the PPU and APU, and thus…]]></description><link>https://cronokirby.github.io/projects/ludus/</link><guid isPermaLink="false">https://cronokirby.github.io/projects/ludus/</guid><pubDate>Sat, 01 Sep 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;strong&gt;Ludus&lt;/strong&gt; is an emulator for the NES console, written in &lt;em&gt;Rust&lt;/em&gt;. The emulator
fully emulates, the core CPU, as well as the PPU and APU, and thus full video
and audio. The emulator also supports a handful of mappers / cartridge types, and thus
many common games such as Mario or Zelda.&lt;/p&gt;
&lt;!--more--&gt;</content:encoded></item><item><title><![CDATA[Alchemy]]></title><description><![CDATA[Alchemy is a library over the API for the chat application
Discord. The library integrates over Discord's REST
and Websocket APIs in order…]]></description><link>https://cronokirby.github.io/projects/alchemy/</link><guid isPermaLink="false">https://cronokirby.github.io/projects/alchemy/</guid><pubDate>Mon, 01 Jan 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;strong&gt;Alchemy&lt;/strong&gt; is a library over the API for the chat application
&lt;a href=&quot;http://discordapp.com/&quot;&gt;Discord&lt;/a&gt;. The library integrates over Discord&apos;s REST
and Websocket APIs in order to help developers write applications for their chat
servers. &lt;em&gt;Elixir&lt;/em&gt; was used in order to have easy access to the concurrency involved
in juggling these various resources.&lt;/p&gt;
&lt;!--more--&gt;</content:encoded></item></channel></rss>